// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/tensor.proto

package tensorflow;

public final class Tensor {
  private Tensor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface TensorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.TensorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .tensorflow.DataType dtype = 1;</code>
     */
    int getDtypeValue();
    /**
     * <code>optional .tensorflow.DataType dtype = 1;</code>
     */
    tensorflow.Types.DataType getDtype();

    /**
     * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
     *
     * <pre>
     * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
     * </pre>
     */
    boolean hasTensorShape();
    /**
     * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
     *
     * <pre>
     * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
     * </pre>
     */
    tensorflow.TensorShape.TensorShapeProto getTensorShape();
    /**
     * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
     *
     * <pre>
     * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
     * </pre>
     */
    tensorflow.TensorShape.TensorShapeProtoOrBuilder getTensorShapeOrBuilder();

    /**
     * <code>optional int32 version_number = 3;</code>
     *
     * <pre>
     * Version number.
     * In version 0, if the "repeated xxx" representations contain only one
     * element, that element is repeated to fill the shape.  This makes it easy
     * to represent a constant Tensor with a single value.
     * </pre>
     */
    int getVersionNumber();

    /**
     * <code>optional bytes tensor_content = 4;</code>
     *
     * <pre>
     * Serialized content from TensorBase::Serialize() This representation can be
     * used for all tensor types.
     * </pre>
     */
    com.google.protobuf.ByteString getTensorContent();

    /**
     * <code>repeated float float_val = 5 [packed = true];</code>
     *
     * <pre>
     * DT_FLOAT.
     * </pre>
     */
    java.util.List<java.lang.Float> getFloatValList();
    /**
     * <code>repeated float float_val = 5 [packed = true];</code>
     *
     * <pre>
     * DT_FLOAT.
     * </pre>
     */
    int getFloatValCount();
    /**
     * <code>repeated float float_val = 5 [packed = true];</code>
     *
     * <pre>
     * DT_FLOAT.
     * </pre>
     */
    float getFloatVal(int index);

    /**
     * <code>repeated double double_val = 6 [packed = true];</code>
     *
     * <pre>
     * DT_DOUBLE.
     * </pre>
     */
    java.util.List<java.lang.Double> getDoubleValList();
    /**
     * <code>repeated double double_val = 6 [packed = true];</code>
     *
     * <pre>
     * DT_DOUBLE.
     * </pre>
     */
    int getDoubleValCount();
    /**
     * <code>repeated double double_val = 6 [packed = true];</code>
     *
     * <pre>
     * DT_DOUBLE.
     * </pre>
     */
    double getDoubleVal(int index);

    /**
     * <code>repeated int32 int_val = 7 [packed = true];</code>
     *
     * <pre>
     * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
     * </pre>
     */
    java.util.List<java.lang.Integer> getIntValList();
    /**
     * <code>repeated int32 int_val = 7 [packed = true];</code>
     *
     * <pre>
     * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
     * </pre>
     */
    int getIntValCount();
    /**
     * <code>repeated int32 int_val = 7 [packed = true];</code>
     *
     * <pre>
     * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
     * </pre>
     */
    int getIntVal(int index);

    /**
     * <code>repeated bytes string_val = 8;</code>
     *
     * <pre>
     * DT_STRING
     * </pre>
     */
    java.util.List<com.google.protobuf.ByteString> getStringValList();
    /**
     * <code>repeated bytes string_val = 8;</code>
     *
     * <pre>
     * DT_STRING
     * </pre>
     */
    int getStringValCount();
    /**
     * <code>repeated bytes string_val = 8;</code>
     *
     * <pre>
     * DT_STRING
     * </pre>
     */
    com.google.protobuf.ByteString getStringVal(int index);

    /**
     * <code>repeated float scomplex_val = 9 [packed = true];</code>
     *
     * <pre>
     * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
     * and imaginary parts of i-th single precision complex.
     * </pre>
     */
    java.util.List<java.lang.Float> getScomplexValList();
    /**
     * <code>repeated float scomplex_val = 9 [packed = true];</code>
     *
     * <pre>
     * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
     * and imaginary parts of i-th single precision complex.
     * </pre>
     */
    int getScomplexValCount();
    /**
     * <code>repeated float scomplex_val = 9 [packed = true];</code>
     *
     * <pre>
     * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
     * and imaginary parts of i-th single precision complex.
     * </pre>
     */
    float getScomplexVal(int index);

    /**
     * <code>repeated int64 int64_val = 10 [packed = true];</code>
     *
     * <pre>
     * DT_INT64
     * </pre>
     */
    java.util.List<java.lang.Long> getInt64ValList();
    /**
     * <code>repeated int64 int64_val = 10 [packed = true];</code>
     *
     * <pre>
     * DT_INT64
     * </pre>
     */
    int getInt64ValCount();
    /**
     * <code>repeated int64 int64_val = 10 [packed = true];</code>
     *
     * <pre>
     * DT_INT64
     * </pre>
     */
    long getInt64Val(int index);

    /**
     * <code>repeated bool bool_val = 11 [packed = true];</code>
     *
     * <pre>
     * DT_BOOL
     * </pre>
     */
    java.util.List<java.lang.Boolean> getBoolValList();
    /**
     * <code>repeated bool bool_val = 11 [packed = true];</code>
     *
     * <pre>
     * DT_BOOL
     * </pre>
     */
    int getBoolValCount();
    /**
     * <code>repeated bool bool_val = 11 [packed = true];</code>
     *
     * <pre>
     * DT_BOOL
     * </pre>
     */
    boolean getBoolVal(int index);
  }
  /**
   * Protobuf type {@code tensorflow.TensorProto}
   *
   * <pre>
   * Protocol buffer representing a tensor.
   * </pre>
   */
  public  static final class TensorProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:tensorflow.TensorProto)
      TensorProtoOrBuilder {
    // Use TensorProto.newBuilder() to construct.
    private TensorProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TensorProto() {
      dtype_ = 0;
      versionNumber_ = 0;
      tensorContent_ = com.google.protobuf.ByteString.EMPTY;
      floatVal_ = java.util.Collections.emptyList();
      doubleVal_ = java.util.Collections.emptyList();
      intVal_ = java.util.Collections.emptyList();
      stringVal_ = java.util.Collections.emptyList();
      scomplexVal_ = java.util.Collections.emptyList();
      int64Val_ = java.util.Collections.emptyList();
      boolVal_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private TensorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              dtype_ = rawValue;
              break;
            }
            case 18: {
              tensorflow.TensorShape.TensorShapeProto.Builder subBuilder = null;
              if (tensorShape_ != null) {
                subBuilder = tensorShape_.toBuilder();
              }
              tensorShape_ = input.readMessage(tensorflow.TensorShape.TensorShapeProto.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tensorShape_);
                tensorShape_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {

              versionNumber_ = input.readInt32();
              break;
            }
            case 34: {

              tensorContent_ = input.readBytes();
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                floatVal_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              floatVal_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                floatVal_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                floatVal_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                doubleVal_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              doubleVal_.add(input.readDouble());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                doubleVal_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleVal_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                intVal_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              intVal_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                intVal_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                intVal_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                stringVal_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000080;
              }
              stringVal_.add(input.readBytes());
              break;
            }
            case 77: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                scomplexVal_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000100;
              }
              scomplexVal_.add(input.readFloat());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                scomplexVal_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                scomplexVal_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                int64Val_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000200;
              }
              int64Val_.add(input.readInt64());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                int64Val_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                int64Val_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                boolVal_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000400;
              }
              boolVal_.add(input.readBool());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                boolVal_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                boolVal_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          floatVal_ = java.util.Collections.unmodifiableList(floatVal_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          doubleVal_ = java.util.Collections.unmodifiableList(doubleVal_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          intVal_ = java.util.Collections.unmodifiableList(intVal_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          stringVal_ = java.util.Collections.unmodifiableList(stringVal_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          scomplexVal_ = java.util.Collections.unmodifiableList(scomplexVal_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          int64Val_ = java.util.Collections.unmodifiableList(int64Val_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          boolVal_ = java.util.Collections.unmodifiableList(boolVal_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tensorflow.Tensor.internal_static_tensorflow_TensorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tensorflow.Tensor.internal_static_tensorflow_TensorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tensorflow.Tensor.TensorProto.class, tensorflow.Tensor.TensorProto.Builder.class);
    }

    private int bitField0_;
    public static final int DTYPE_FIELD_NUMBER = 1;
    private int dtype_;
    /**
     * <code>optional .tensorflow.DataType dtype = 1;</code>
     */
    public int getDtypeValue() {
      return dtype_;
    }
    /**
     * <code>optional .tensorflow.DataType dtype = 1;</code>
     */
    public tensorflow.Types.DataType getDtype() {
      tensorflow.Types.DataType result = tensorflow.Types.DataType.valueOf(dtype_);
      return result == null ? tensorflow.Types.DataType.UNRECOGNIZED : result;
    }

    public static final int TENSOR_SHAPE_FIELD_NUMBER = 2;
    private tensorflow.TensorShape.TensorShapeProto tensorShape_;
    /**
     * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
     *
     * <pre>
     * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
     * </pre>
     */
    public boolean hasTensorShape() {
      return tensorShape_ != null;
    }
    /**
     * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
     *
     * <pre>
     * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
     * </pre>
     */
    public tensorflow.TensorShape.TensorShapeProto getTensorShape() {
      return tensorShape_ == null ? tensorflow.TensorShape.TensorShapeProto.getDefaultInstance() : tensorShape_;
    }
    /**
     * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
     *
     * <pre>
     * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
     * </pre>
     */
    public tensorflow.TensorShape.TensorShapeProtoOrBuilder getTensorShapeOrBuilder() {
      return getTensorShape();
    }

    public static final int VERSION_NUMBER_FIELD_NUMBER = 3;
    private int versionNumber_;
    /**
     * <code>optional int32 version_number = 3;</code>
     *
     * <pre>
     * Version number.
     * In version 0, if the "repeated xxx" representations contain only one
     * element, that element is repeated to fill the shape.  This makes it easy
     * to represent a constant Tensor with a single value.
     * </pre>
     */
    public int getVersionNumber() {
      return versionNumber_;
    }

    public static final int TENSOR_CONTENT_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString tensorContent_;
    /**
     * <code>optional bytes tensor_content = 4;</code>
     *
     * <pre>
     * Serialized content from TensorBase::Serialize() This representation can be
     * used for all tensor types.
     * </pre>
     */
    public com.google.protobuf.ByteString getTensorContent() {
      return tensorContent_;
    }

    public static final int FLOAT_VAL_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> floatVal_;
    /**
     * <code>repeated float float_val = 5 [packed = true];</code>
     *
     * <pre>
     * DT_FLOAT.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getFloatValList() {
      return floatVal_;
    }
    /**
     * <code>repeated float float_val = 5 [packed = true];</code>
     *
     * <pre>
     * DT_FLOAT.
     * </pre>
     */
    public int getFloatValCount() {
      return floatVal_.size();
    }
    /**
     * <code>repeated float float_val = 5 [packed = true];</code>
     *
     * <pre>
     * DT_FLOAT.
     * </pre>
     */
    public float getFloatVal(int index) {
      return floatVal_.get(index);
    }
    private int floatValMemoizedSerializedSize = -1;

    public static final int DOUBLE_VAL_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Double> doubleVal_;
    /**
     * <code>repeated double double_val = 6 [packed = true];</code>
     *
     * <pre>
     * DT_DOUBLE.
     * </pre>
     */
    public java.util.List<java.lang.Double>
        getDoubleValList() {
      return doubleVal_;
    }
    /**
     * <code>repeated double double_val = 6 [packed = true];</code>
     *
     * <pre>
     * DT_DOUBLE.
     * </pre>
     */
    public int getDoubleValCount() {
      return doubleVal_.size();
    }
    /**
     * <code>repeated double double_val = 6 [packed = true];</code>
     *
     * <pre>
     * DT_DOUBLE.
     * </pre>
     */
    public double getDoubleVal(int index) {
      return doubleVal_.get(index);
    }
    private int doubleValMemoizedSerializedSize = -1;

    public static final int INT_VAL_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> intVal_;
    /**
     * <code>repeated int32 int_val = 7 [packed = true];</code>
     *
     * <pre>
     * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getIntValList() {
      return intVal_;
    }
    /**
     * <code>repeated int32 int_val = 7 [packed = true];</code>
     *
     * <pre>
     * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
     * </pre>
     */
    public int getIntValCount() {
      return intVal_.size();
    }
    /**
     * <code>repeated int32 int_val = 7 [packed = true];</code>
     *
     * <pre>
     * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
     * </pre>
     */
    public int getIntVal(int index) {
      return intVal_.get(index);
    }
    private int intValMemoizedSerializedSize = -1;

    public static final int STRING_VAL_FIELD_NUMBER = 8;
    private java.util.List<com.google.protobuf.ByteString> stringVal_;
    /**
     * <code>repeated bytes string_val = 8;</code>
     *
     * <pre>
     * DT_STRING
     * </pre>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getStringValList() {
      return stringVal_;
    }
    /**
     * <code>repeated bytes string_val = 8;</code>
     *
     * <pre>
     * DT_STRING
     * </pre>
     */
    public int getStringValCount() {
      return stringVal_.size();
    }
    /**
     * <code>repeated bytes string_val = 8;</code>
     *
     * <pre>
     * DT_STRING
     * </pre>
     */
    public com.google.protobuf.ByteString getStringVal(int index) {
      return stringVal_.get(index);
    }

    public static final int SCOMPLEX_VAL_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Float> scomplexVal_;
    /**
     * <code>repeated float scomplex_val = 9 [packed = true];</code>
     *
     * <pre>
     * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
     * and imaginary parts of i-th single precision complex.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getScomplexValList() {
      return scomplexVal_;
    }
    /**
     * <code>repeated float scomplex_val = 9 [packed = true];</code>
     *
     * <pre>
     * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
     * and imaginary parts of i-th single precision complex.
     * </pre>
     */
    public int getScomplexValCount() {
      return scomplexVal_.size();
    }
    /**
     * <code>repeated float scomplex_val = 9 [packed = true];</code>
     *
     * <pre>
     * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
     * and imaginary parts of i-th single precision complex.
     * </pre>
     */
    public float getScomplexVal(int index) {
      return scomplexVal_.get(index);
    }
    private int scomplexValMemoizedSerializedSize = -1;

    public static final int INT64_VAL_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Long> int64Val_;
    /**
     * <code>repeated int64 int64_val = 10 [packed = true];</code>
     *
     * <pre>
     * DT_INT64
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getInt64ValList() {
      return int64Val_;
    }
    /**
     * <code>repeated int64 int64_val = 10 [packed = true];</code>
     *
     * <pre>
     * DT_INT64
     * </pre>
     */
    public int getInt64ValCount() {
      return int64Val_.size();
    }
    /**
     * <code>repeated int64 int64_val = 10 [packed = true];</code>
     *
     * <pre>
     * DT_INT64
     * </pre>
     */
    public long getInt64Val(int index) {
      return int64Val_.get(index);
    }
    private int int64ValMemoizedSerializedSize = -1;

    public static final int BOOL_VAL_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Boolean> boolVal_;
    /**
     * <code>repeated bool bool_val = 11 [packed = true];</code>
     *
     * <pre>
     * DT_BOOL
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getBoolValList() {
      return boolVal_;
    }
    /**
     * <code>repeated bool bool_val = 11 [packed = true];</code>
     *
     * <pre>
     * DT_BOOL
     * </pre>
     */
    public int getBoolValCount() {
      return boolVal_.size();
    }
    /**
     * <code>repeated bool bool_val = 11 [packed = true];</code>
     *
     * <pre>
     * DT_BOOL
     * </pre>
     */
    public boolean getBoolVal(int index) {
      return boolVal_.get(index);
    }
    private int boolValMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (dtype_ != tensorflow.Types.DataType.DT_INVALID.getNumber()) {
        output.writeEnum(1, dtype_);
      }
      if (tensorShape_ != null) {
        output.writeMessage(2, getTensorShape());
      }
      if (versionNumber_ != 0) {
        output.writeInt32(3, versionNumber_);
      }
      if (!tensorContent_.isEmpty()) {
        output.writeBytes(4, tensorContent_);
      }
      if (getFloatValList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(floatValMemoizedSerializedSize);
      }
      for (int i = 0; i < floatVal_.size(); i++) {
        output.writeFloatNoTag(floatVal_.get(i));
      }
      if (getDoubleValList().size() > 0) {
        output.writeRawVarint32(50);
        output.writeRawVarint32(doubleValMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleVal_.size(); i++) {
        output.writeDoubleNoTag(doubleVal_.get(i));
      }
      if (getIntValList().size() > 0) {
        output.writeRawVarint32(58);
        output.writeRawVarint32(intValMemoizedSerializedSize);
      }
      for (int i = 0; i < intVal_.size(); i++) {
        output.writeInt32NoTag(intVal_.get(i));
      }
      for (int i = 0; i < stringVal_.size(); i++) {
        output.writeBytes(8, stringVal_.get(i));
      }
      if (getScomplexValList().size() > 0) {
        output.writeRawVarint32(74);
        output.writeRawVarint32(scomplexValMemoizedSerializedSize);
      }
      for (int i = 0; i < scomplexVal_.size(); i++) {
        output.writeFloatNoTag(scomplexVal_.get(i));
      }
      if (getInt64ValList().size() > 0) {
        output.writeRawVarint32(82);
        output.writeRawVarint32(int64ValMemoizedSerializedSize);
      }
      for (int i = 0; i < int64Val_.size(); i++) {
        output.writeInt64NoTag(int64Val_.get(i));
      }
      if (getBoolValList().size() > 0) {
        output.writeRawVarint32(90);
        output.writeRawVarint32(boolValMemoizedSerializedSize);
      }
      for (int i = 0; i < boolVal_.size(); i++) {
        output.writeBoolNoTag(boolVal_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dtype_ != tensorflow.Types.DataType.DT_INVALID.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, dtype_);
      }
      if (tensorShape_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTensorShape());
      }
      if (versionNumber_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, versionNumber_);
      }
      if (!tensorContent_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, tensorContent_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatValList().size();
        size += dataSize;
        if (!getFloatValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        floatValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleValList().size();
        size += dataSize;
        if (!getDoubleValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < intVal_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(intVal_.get(i));
        }
        size += dataSize;
        if (!getIntValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        intValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringVal_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stringVal_.get(i));
        }
        size += dataSize;
        size += 1 * getStringValList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getScomplexValList().size();
        size += dataSize;
        if (!getScomplexValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        scomplexValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < int64Val_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(int64Val_.get(i));
        }
        size += dataSize;
        if (!getInt64ValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        int64ValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 1 * getBoolValList().size();
        size += dataSize;
        if (!getBoolValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        boolValMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static tensorflow.Tensor.TensorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Tensor.TensorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Tensor.TensorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Tensor.TensorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Tensor.TensorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Tensor.TensorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static tensorflow.Tensor.TensorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static tensorflow.Tensor.TensorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static tensorflow.Tensor.TensorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Tensor.TensorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tensorflow.Tensor.TensorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tensorflow.TensorProto}
     *
     * <pre>
     * Protocol buffer representing a tensor.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.TensorProto)
        tensorflow.Tensor.TensorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tensorflow.Tensor.internal_static_tensorflow_TensorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tensorflow.Tensor.internal_static_tensorflow_TensorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tensorflow.Tensor.TensorProto.class, tensorflow.Tensor.TensorProto.Builder.class);
      }

      // Construct using tensorflow.Tensor.TensorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        dtype_ = 0;

        if (tensorShapeBuilder_ == null) {
          tensorShape_ = null;
        } else {
          tensorShape_ = null;
          tensorShapeBuilder_ = null;
        }
        versionNumber_ = 0;

        tensorContent_ = com.google.protobuf.ByteString.EMPTY;

        floatVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        doubleVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        intVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        stringVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        scomplexVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        int64Val_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        boolVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tensorflow.Tensor.internal_static_tensorflow_TensorProto_descriptor;
      }

      public tensorflow.Tensor.TensorProto getDefaultInstanceForType() {
        return tensorflow.Tensor.TensorProto.getDefaultInstance();
      }

      public tensorflow.Tensor.TensorProto build() {
        tensorflow.Tensor.TensorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public tensorflow.Tensor.TensorProto buildPartial() {
        tensorflow.Tensor.TensorProto result = new tensorflow.Tensor.TensorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.dtype_ = dtype_;
        if (tensorShapeBuilder_ == null) {
          result.tensorShape_ = tensorShape_;
        } else {
          result.tensorShape_ = tensorShapeBuilder_.build();
        }
        result.versionNumber_ = versionNumber_;
        result.tensorContent_ = tensorContent_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          floatVal_ = java.util.Collections.unmodifiableList(floatVal_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.floatVal_ = floatVal_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          doubleVal_ = java.util.Collections.unmodifiableList(doubleVal_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.doubleVal_ = doubleVal_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          intVal_ = java.util.Collections.unmodifiableList(intVal_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.intVal_ = intVal_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          stringVal_ = java.util.Collections.unmodifiableList(stringVal_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.stringVal_ = stringVal_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          scomplexVal_ = java.util.Collections.unmodifiableList(scomplexVal_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.scomplexVal_ = scomplexVal_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          int64Val_ = java.util.Collections.unmodifiableList(int64Val_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.int64Val_ = int64Val_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          boolVal_ = java.util.Collections.unmodifiableList(boolVal_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.boolVal_ = boolVal_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tensorflow.Tensor.TensorProto) {
          return mergeFrom((tensorflow.Tensor.TensorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tensorflow.Tensor.TensorProto other) {
        if (other == tensorflow.Tensor.TensorProto.getDefaultInstance()) return this;
        if (other.dtype_ != 0) {
          setDtypeValue(other.getDtypeValue());
        }
        if (other.hasTensorShape()) {
          mergeTensorShape(other.getTensorShape());
        }
        if (other.getVersionNumber() != 0) {
          setVersionNumber(other.getVersionNumber());
        }
        if (other.getTensorContent() != com.google.protobuf.ByteString.EMPTY) {
          setTensorContent(other.getTensorContent());
        }
        if (!other.floatVal_.isEmpty()) {
          if (floatVal_.isEmpty()) {
            floatVal_ = other.floatVal_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureFloatValIsMutable();
            floatVal_.addAll(other.floatVal_);
          }
          onChanged();
        }
        if (!other.doubleVal_.isEmpty()) {
          if (doubleVal_.isEmpty()) {
            doubleVal_ = other.doubleVal_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDoubleValIsMutable();
            doubleVal_.addAll(other.doubleVal_);
          }
          onChanged();
        }
        if (!other.intVal_.isEmpty()) {
          if (intVal_.isEmpty()) {
            intVal_ = other.intVal_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureIntValIsMutable();
            intVal_.addAll(other.intVal_);
          }
          onChanged();
        }
        if (!other.stringVal_.isEmpty()) {
          if (stringVal_.isEmpty()) {
            stringVal_ = other.stringVal_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureStringValIsMutable();
            stringVal_.addAll(other.stringVal_);
          }
          onChanged();
        }
        if (!other.scomplexVal_.isEmpty()) {
          if (scomplexVal_.isEmpty()) {
            scomplexVal_ = other.scomplexVal_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureScomplexValIsMutable();
            scomplexVal_.addAll(other.scomplexVal_);
          }
          onChanged();
        }
        if (!other.int64Val_.isEmpty()) {
          if (int64Val_.isEmpty()) {
            int64Val_ = other.int64Val_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureInt64ValIsMutable();
            int64Val_.addAll(other.int64Val_);
          }
          onChanged();
        }
        if (!other.boolVal_.isEmpty()) {
          if (boolVal_.isEmpty()) {
            boolVal_ = other.boolVal_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureBoolValIsMutable();
            boolVal_.addAll(other.boolVal_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tensorflow.Tensor.TensorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tensorflow.Tensor.TensorProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int dtype_ = 0;
      /**
       * <code>optional .tensorflow.DataType dtype = 1;</code>
       */
      public int getDtypeValue() {
        return dtype_;
      }
      /**
       * <code>optional .tensorflow.DataType dtype = 1;</code>
       */
      public Builder setDtypeValue(int value) {
        dtype_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .tensorflow.DataType dtype = 1;</code>
       */
      public tensorflow.Types.DataType getDtype() {
        tensorflow.Types.DataType result = tensorflow.Types.DataType.valueOf(dtype_);
        return result == null ? tensorflow.Types.DataType.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .tensorflow.DataType dtype = 1;</code>
       */
      public Builder setDtype(tensorflow.Types.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        dtype_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .tensorflow.DataType dtype = 1;</code>
       */
      public Builder clearDtype() {
        
        dtype_ = 0;
        onChanged();
        return this;
      }

      private tensorflow.TensorShape.TensorShapeProto tensorShape_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          tensorflow.TensorShape.TensorShapeProto, tensorflow.TensorShape.TensorShapeProto.Builder, tensorflow.TensorShape.TensorShapeProtoOrBuilder> tensorShapeBuilder_;
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public boolean hasTensorShape() {
        return tensorShapeBuilder_ != null || tensorShape_ != null;
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public tensorflow.TensorShape.TensorShapeProto getTensorShape() {
        if (tensorShapeBuilder_ == null) {
          return tensorShape_ == null ? tensorflow.TensorShape.TensorShapeProto.getDefaultInstance() : tensorShape_;
        } else {
          return tensorShapeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public Builder setTensorShape(tensorflow.TensorShape.TensorShapeProto value) {
        if (tensorShapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tensorShape_ = value;
          onChanged();
        } else {
          tensorShapeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public Builder setTensorShape(
          tensorflow.TensorShape.TensorShapeProto.Builder builderForValue) {
        if (tensorShapeBuilder_ == null) {
          tensorShape_ = builderForValue.build();
          onChanged();
        } else {
          tensorShapeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public Builder mergeTensorShape(tensorflow.TensorShape.TensorShapeProto value) {
        if (tensorShapeBuilder_ == null) {
          if (tensorShape_ != null) {
            tensorShape_ =
              tensorflow.TensorShape.TensorShapeProto.newBuilder(tensorShape_).mergeFrom(value).buildPartial();
          } else {
            tensorShape_ = value;
          }
          onChanged();
        } else {
          tensorShapeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public Builder clearTensorShape() {
        if (tensorShapeBuilder_ == null) {
          tensorShape_ = null;
          onChanged();
        } else {
          tensorShape_ = null;
          tensorShapeBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public tensorflow.TensorShape.TensorShapeProto.Builder getTensorShapeBuilder() {
        
        onChanged();
        return getTensorShapeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      public tensorflow.TensorShape.TensorShapeProtoOrBuilder getTensorShapeOrBuilder() {
        if (tensorShapeBuilder_ != null) {
          return tensorShapeBuilder_.getMessageOrBuilder();
        } else {
          return tensorShape_ == null ?
              tensorflow.TensorShape.TensorShapeProto.getDefaultInstance() : tensorShape_;
        }
      }
      /**
       * <code>optional .tensorflow.TensorShapeProto tensor_shape = 2;</code>
       *
       * <pre>
       * Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          tensorflow.TensorShape.TensorShapeProto, tensorflow.TensorShape.TensorShapeProto.Builder, tensorflow.TensorShape.TensorShapeProtoOrBuilder> 
          getTensorShapeFieldBuilder() {
        if (tensorShapeBuilder_ == null) {
          tensorShapeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              tensorflow.TensorShape.TensorShapeProto, tensorflow.TensorShape.TensorShapeProto.Builder, tensorflow.TensorShape.TensorShapeProtoOrBuilder>(
                  getTensorShape(),
                  getParentForChildren(),
                  isClean());
          tensorShape_ = null;
        }
        return tensorShapeBuilder_;
      }

      private int versionNumber_ ;
      /**
       * <code>optional int32 version_number = 3;</code>
       *
       * <pre>
       * Version number.
       * In version 0, if the "repeated xxx" representations contain only one
       * element, that element is repeated to fill the shape.  This makes it easy
       * to represent a constant Tensor with a single value.
       * </pre>
       */
      public int getVersionNumber() {
        return versionNumber_;
      }
      /**
       * <code>optional int32 version_number = 3;</code>
       *
       * <pre>
       * Version number.
       * In version 0, if the "repeated xxx" representations contain only one
       * element, that element is repeated to fill the shape.  This makes it easy
       * to represent a constant Tensor with a single value.
       * </pre>
       */
      public Builder setVersionNumber(int value) {
        
        versionNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version_number = 3;</code>
       *
       * <pre>
       * Version number.
       * In version 0, if the "repeated xxx" representations contain only one
       * element, that element is repeated to fill the shape.  This makes it easy
       * to represent a constant Tensor with a single value.
       * </pre>
       */
      public Builder clearVersionNumber() {
        
        versionNumber_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString tensorContent_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes tensor_content = 4;</code>
       *
       * <pre>
       * Serialized content from TensorBase::Serialize() This representation can be
       * used for all tensor types.
       * </pre>
       */
      public com.google.protobuf.ByteString getTensorContent() {
        return tensorContent_;
      }
      /**
       * <code>optional bytes tensor_content = 4;</code>
       *
       * <pre>
       * Serialized content from TensorBase::Serialize() This representation can be
       * used for all tensor types.
       * </pre>
       */
      public Builder setTensorContent(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tensorContent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes tensor_content = 4;</code>
       *
       * <pre>
       * Serialized content from TensorBase::Serialize() This representation can be
       * used for all tensor types.
       * </pre>
       */
      public Builder clearTensorContent() {
        
        tensorContent_ = getDefaultInstance().getTensorContent();
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> floatVal_ = java.util.Collections.emptyList();
      private void ensureFloatValIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          floatVal_ = new java.util.ArrayList<java.lang.Float>(floatVal_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated float float_val = 5 [packed = true];</code>
       *
       * <pre>
       * DT_FLOAT.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getFloatValList() {
        return java.util.Collections.unmodifiableList(floatVal_);
      }
      /**
       * <code>repeated float float_val = 5 [packed = true];</code>
       *
       * <pre>
       * DT_FLOAT.
       * </pre>
       */
      public int getFloatValCount() {
        return floatVal_.size();
      }
      /**
       * <code>repeated float float_val = 5 [packed = true];</code>
       *
       * <pre>
       * DT_FLOAT.
       * </pre>
       */
      public float getFloatVal(int index) {
        return floatVal_.get(index);
      }
      /**
       * <code>repeated float float_val = 5 [packed = true];</code>
       *
       * <pre>
       * DT_FLOAT.
       * </pre>
       */
      public Builder setFloatVal(
          int index, float value) {
        ensureFloatValIsMutable();
        floatVal_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_val = 5 [packed = true];</code>
       *
       * <pre>
       * DT_FLOAT.
       * </pre>
       */
      public Builder addFloatVal(float value) {
        ensureFloatValIsMutable();
        floatVal_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_val = 5 [packed = true];</code>
       *
       * <pre>
       * DT_FLOAT.
       * </pre>
       */
      public Builder addAllFloatVal(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, floatVal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_val = 5 [packed = true];</code>
       *
       * <pre>
       * DT_FLOAT.
       * </pre>
       */
      public Builder clearFloatVal() {
        floatVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> doubleVal_ = java.util.Collections.emptyList();
      private void ensureDoubleValIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          doubleVal_ = new java.util.ArrayList<java.lang.Double>(doubleVal_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated double double_val = 6 [packed = true];</code>
       *
       * <pre>
       * DT_DOUBLE.
       * </pre>
       */
      public java.util.List<java.lang.Double>
          getDoubleValList() {
        return java.util.Collections.unmodifiableList(doubleVal_);
      }
      /**
       * <code>repeated double double_val = 6 [packed = true];</code>
       *
       * <pre>
       * DT_DOUBLE.
       * </pre>
       */
      public int getDoubleValCount() {
        return doubleVal_.size();
      }
      /**
       * <code>repeated double double_val = 6 [packed = true];</code>
       *
       * <pre>
       * DT_DOUBLE.
       * </pre>
       */
      public double getDoubleVal(int index) {
        return doubleVal_.get(index);
      }
      /**
       * <code>repeated double double_val = 6 [packed = true];</code>
       *
       * <pre>
       * DT_DOUBLE.
       * </pre>
       */
      public Builder setDoubleVal(
          int index, double value) {
        ensureDoubleValIsMutable();
        doubleVal_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_val = 6 [packed = true];</code>
       *
       * <pre>
       * DT_DOUBLE.
       * </pre>
       */
      public Builder addDoubleVal(double value) {
        ensureDoubleValIsMutable();
        doubleVal_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_val = 6 [packed = true];</code>
       *
       * <pre>
       * DT_DOUBLE.
       * </pre>
       */
      public Builder addAllDoubleVal(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, doubleVal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_val = 6 [packed = true];</code>
       *
       * <pre>
       * DT_DOUBLE.
       * </pre>
       */
      public Builder clearDoubleVal() {
        doubleVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> intVal_ = java.util.Collections.emptyList();
      private void ensureIntValIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          intVal_ = new java.util.ArrayList<java.lang.Integer>(intVal_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 int_val = 7 [packed = true];</code>
       *
       * <pre>
       * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIntValList() {
        return java.util.Collections.unmodifiableList(intVal_);
      }
      /**
       * <code>repeated int32 int_val = 7 [packed = true];</code>
       *
       * <pre>
       * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
       * </pre>
       */
      public int getIntValCount() {
        return intVal_.size();
      }
      /**
       * <code>repeated int32 int_val = 7 [packed = true];</code>
       *
       * <pre>
       * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
       * </pre>
       */
      public int getIntVal(int index) {
        return intVal_.get(index);
      }
      /**
       * <code>repeated int32 int_val = 7 [packed = true];</code>
       *
       * <pre>
       * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
       * </pre>
       */
      public Builder setIntVal(
          int index, int value) {
        ensureIntValIsMutable();
        intVal_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int_val = 7 [packed = true];</code>
       *
       * <pre>
       * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
       * </pre>
       */
      public Builder addIntVal(int value) {
        ensureIntValIsMutable();
        intVal_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int_val = 7 [packed = true];</code>
       *
       * <pre>
       * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
       * </pre>
       */
      public Builder addAllIntVal(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIntValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, intVal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int_val = 7 [packed = true];</code>
       *
       * <pre>
       * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
       * </pre>
       */
      public Builder clearIntVal() {
        intVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> stringVal_ = java.util.Collections.emptyList();
      private void ensureStringValIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          stringVal_ = new java.util.ArrayList<com.google.protobuf.ByteString>(stringVal_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated bytes string_val = 8;</code>
       *
       * <pre>
       * DT_STRING
       * </pre>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getStringValList() {
        return java.util.Collections.unmodifiableList(stringVal_);
      }
      /**
       * <code>repeated bytes string_val = 8;</code>
       *
       * <pre>
       * DT_STRING
       * </pre>
       */
      public int getStringValCount() {
        return stringVal_.size();
      }
      /**
       * <code>repeated bytes string_val = 8;</code>
       *
       * <pre>
       * DT_STRING
       * </pre>
       */
      public com.google.protobuf.ByteString getStringVal(int index) {
        return stringVal_.get(index);
      }
      /**
       * <code>repeated bytes string_val = 8;</code>
       *
       * <pre>
       * DT_STRING
       * </pre>
       */
      public Builder setStringVal(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValIsMutable();
        stringVal_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes string_val = 8;</code>
       *
       * <pre>
       * DT_STRING
       * </pre>
       */
      public Builder addStringVal(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValIsMutable();
        stringVal_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes string_val = 8;</code>
       *
       * <pre>
       * DT_STRING
       * </pre>
       */
      public Builder addAllStringVal(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureStringValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stringVal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes string_val = 8;</code>
       *
       * <pre>
       * DT_STRING
       * </pre>
       */
      public Builder clearStringVal() {
        stringVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> scomplexVal_ = java.util.Collections.emptyList();
      private void ensureScomplexValIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          scomplexVal_ = new java.util.ArrayList<java.lang.Float>(scomplexVal_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated float scomplex_val = 9 [packed = true];</code>
       *
       * <pre>
       * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
       * and imaginary parts of i-th single precision complex.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getScomplexValList() {
        return java.util.Collections.unmodifiableList(scomplexVal_);
      }
      /**
       * <code>repeated float scomplex_val = 9 [packed = true];</code>
       *
       * <pre>
       * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
       * and imaginary parts of i-th single precision complex.
       * </pre>
       */
      public int getScomplexValCount() {
        return scomplexVal_.size();
      }
      /**
       * <code>repeated float scomplex_val = 9 [packed = true];</code>
       *
       * <pre>
       * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
       * and imaginary parts of i-th single precision complex.
       * </pre>
       */
      public float getScomplexVal(int index) {
        return scomplexVal_.get(index);
      }
      /**
       * <code>repeated float scomplex_val = 9 [packed = true];</code>
       *
       * <pre>
       * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
       * and imaginary parts of i-th single precision complex.
       * </pre>
       */
      public Builder setScomplexVal(
          int index, float value) {
        ensureScomplexValIsMutable();
        scomplexVal_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float scomplex_val = 9 [packed = true];</code>
       *
       * <pre>
       * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
       * and imaginary parts of i-th single precision complex.
       * </pre>
       */
      public Builder addScomplexVal(float value) {
        ensureScomplexValIsMutable();
        scomplexVal_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float scomplex_val = 9 [packed = true];</code>
       *
       * <pre>
       * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
       * and imaginary parts of i-th single precision complex.
       * </pre>
       */
      public Builder addAllScomplexVal(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureScomplexValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, scomplexVal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float scomplex_val = 9 [packed = true];</code>
       *
       * <pre>
       * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
       * and imaginary parts of i-th single precision complex.
       * </pre>
       */
      public Builder clearScomplexVal() {
        scomplexVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> int64Val_ = java.util.Collections.emptyList();
      private void ensureInt64ValIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          int64Val_ = new java.util.ArrayList<java.lang.Long>(int64Val_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int64 int64_val = 10 [packed = true];</code>
       *
       * <pre>
       * DT_INT64
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getInt64ValList() {
        return java.util.Collections.unmodifiableList(int64Val_);
      }
      /**
       * <code>repeated int64 int64_val = 10 [packed = true];</code>
       *
       * <pre>
       * DT_INT64
       * </pre>
       */
      public int getInt64ValCount() {
        return int64Val_.size();
      }
      /**
       * <code>repeated int64 int64_val = 10 [packed = true];</code>
       *
       * <pre>
       * DT_INT64
       * </pre>
       */
      public long getInt64Val(int index) {
        return int64Val_.get(index);
      }
      /**
       * <code>repeated int64 int64_val = 10 [packed = true];</code>
       *
       * <pre>
       * DT_INT64
       * </pre>
       */
      public Builder setInt64Val(
          int index, long value) {
        ensureInt64ValIsMutable();
        int64Val_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64_val = 10 [packed = true];</code>
       *
       * <pre>
       * DT_INT64
       * </pre>
       */
      public Builder addInt64Val(long value) {
        ensureInt64ValIsMutable();
        int64Val_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64_val = 10 [packed = true];</code>
       *
       * <pre>
       * DT_INT64
       * </pre>
       */
      public Builder addAllInt64Val(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureInt64ValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int64Val_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64_val = 10 [packed = true];</code>
       *
       * <pre>
       * DT_INT64
       * </pre>
       */
      public Builder clearInt64Val() {
        int64Val_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Boolean> boolVal_ = java.util.Collections.emptyList();
      private void ensureBoolValIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          boolVal_ = new java.util.ArrayList<java.lang.Boolean>(boolVal_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated bool bool_val = 11 [packed = true];</code>
       *
       * <pre>
       * DT_BOOL
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getBoolValList() {
        return java.util.Collections.unmodifiableList(boolVal_);
      }
      /**
       * <code>repeated bool bool_val = 11 [packed = true];</code>
       *
       * <pre>
       * DT_BOOL
       * </pre>
       */
      public int getBoolValCount() {
        return boolVal_.size();
      }
      /**
       * <code>repeated bool bool_val = 11 [packed = true];</code>
       *
       * <pre>
       * DT_BOOL
       * </pre>
       */
      public boolean getBoolVal(int index) {
        return boolVal_.get(index);
      }
      /**
       * <code>repeated bool bool_val = 11 [packed = true];</code>
       *
       * <pre>
       * DT_BOOL
       * </pre>
       */
      public Builder setBoolVal(
          int index, boolean value) {
        ensureBoolValIsMutable();
        boolVal_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool_val = 11 [packed = true];</code>
       *
       * <pre>
       * DT_BOOL
       * </pre>
       */
      public Builder addBoolVal(boolean value) {
        ensureBoolValIsMutable();
        boolVal_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool_val = 11 [packed = true];</code>
       *
       * <pre>
       * DT_BOOL
       * </pre>
       */
      public Builder addAllBoolVal(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureBoolValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, boolVal_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool_val = 11 [packed = true];</code>
       *
       * <pre>
       * DT_BOOL
       * </pre>
       */
      public Builder clearBoolVal() {
        boolVal_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.TensorProto)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.TensorProto)
    private static final tensorflow.Tensor.TensorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tensorflow.Tensor.TensorProto();
    }

    public static tensorflow.Tensor.TensorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TensorProto>
        PARSER = new com.google.protobuf.AbstractParser<TensorProto>() {
      public TensorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new TensorProto(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<TensorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TensorProto> getParserForType() {
      return PARSER;
    }

    public tensorflow.Tensor.TensorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_TensorProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tensorflow_TensorProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n&tensorflow/core/framework/tensor.proto" +
      "\022\ntensorflow\032,tensorflow/core/framework/" +
      "tensor_shape.proto\032%tensorflow/core/fram" +
      "ework/types.proto\"\265\002\n\013TensorProto\022#\n\005dty" +
      "pe\030\001 \001(\0162\024.tensorflow.DataType\0222\n\014tensor" +
      "_shape\030\002 \001(\0132\034.tensorflow.TensorShapePro" +
      "to\022\026\n\016version_number\030\003 \001(\005\022\026\n\016tensor_con" +
      "tent\030\004 \001(\014\022\025\n\tfloat_val\030\005 \003(\002B\002\020\001\022\026\n\ndou" +
      "ble_val\030\006 \003(\001B\002\020\001\022\023\n\007int_val\030\007 \003(\005B\002\020\001\022\022" +
      "\n\nstring_val\030\010 \003(\014\022\030\n\014scomplex_val\030\t \003(\002",
      "B\002\020\001\022\025\n\tint64_val\030\n \003(\003B\002\020\001\022\024\n\010bool_val\030" +
      "\013 \003(\010B\002\020\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          tensorflow.TensorShape.getDescriptor(),
          tensorflow.Types.getDescriptor(),
        }, assigner);
    internal_static_tensorflow_TensorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tensorflow_TensorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_tensorflow_TensorProto_descriptor,
        new java.lang.String[] { "Dtype", "TensorShape", "VersionNumber", "TensorContent", "FloatVal", "DoubleVal", "IntVal", "StringVal", "ScomplexVal", "Int64Val", "BoolVal", });
    tensorflow.TensorShape.getDescriptor();
    tensorflow.Types.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
