// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/config.proto

package tensorflow;

public final class Config {
  private Config() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GPUOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.GPUOptions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double per_process_gpu_memory_fraction = 1;</code>
     *
     * <pre>
     * A value between 0 and 1 that indicates what fraction of the
     * available GPU memory to pre-allocate for each process.  1 means
     * to pre-allocate all of the GPU memory, 0.5 means the process
     * allocates ~50% of the available GPU memory.
     * </pre>
     */
    double getPerProcessGpuMemoryFraction();

    /**
     * <code>optional string allocator_type = 2;</code>
     *
     * <pre>
     * The type of GPU allocation strategy to use.
     * Allowed values:
     * "": The empty string (default) uses a system-chosen default
     *     which may change over time.
     * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
     *        version of dlmalloc.
     * </pre>
     */
    java.lang.String getAllocatorType();
    /**
     * <code>optional string allocator_type = 2;</code>
     *
     * <pre>
     * The type of GPU allocation strategy to use.
     * Allowed values:
     * "": The empty string (default) uses a system-chosen default
     *     which may change over time.
     * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
     *        version of dlmalloc.
     * </pre>
     */
    com.google.protobuf.ByteString
        getAllocatorTypeBytes();
  }
  /**
   * Protobuf type {@code tensorflow.GPUOptions}
   */
  public  static final class GPUOptions extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:tensorflow.GPUOptions)
      GPUOptionsOrBuilder {
    // Use GPUOptions.newBuilder() to construct.
    private GPUOptions(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GPUOptions() {
      perProcessGpuMemoryFraction_ = 0D;
      allocatorType_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private GPUOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 9: {

              perProcessGpuMemoryFraction_ = input.readDouble();
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              allocatorType_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tensorflow.Config.internal_static_tensorflow_GPUOptions_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tensorflow.Config.internal_static_tensorflow_GPUOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tensorflow.Config.GPUOptions.class, tensorflow.Config.GPUOptions.Builder.class);
    }

    public static final int PER_PROCESS_GPU_MEMORY_FRACTION_FIELD_NUMBER = 1;
    private double perProcessGpuMemoryFraction_;
    /**
     * <code>optional double per_process_gpu_memory_fraction = 1;</code>
     *
     * <pre>
     * A value between 0 and 1 that indicates what fraction of the
     * available GPU memory to pre-allocate for each process.  1 means
     * to pre-allocate all of the GPU memory, 0.5 means the process
     * allocates ~50% of the available GPU memory.
     * </pre>
     */
    public double getPerProcessGpuMemoryFraction() {
      return perProcessGpuMemoryFraction_;
    }

    public static final int ALLOCATOR_TYPE_FIELD_NUMBER = 2;
    private volatile java.lang.Object allocatorType_;
    /**
     * <code>optional string allocator_type = 2;</code>
     *
     * <pre>
     * The type of GPU allocation strategy to use.
     * Allowed values:
     * "": The empty string (default) uses a system-chosen default
     *     which may change over time.
     * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
     *        version of dlmalloc.
     * </pre>
     */
    public java.lang.String getAllocatorType() {
      java.lang.Object ref = allocatorType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        allocatorType_ = s;
        return s;
      }
    }
    /**
     * <code>optional string allocator_type = 2;</code>
     *
     * <pre>
     * The type of GPU allocation strategy to use.
     * Allowed values:
     * "": The empty string (default) uses a system-chosen default
     *     which may change over time.
     * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
     *        version of dlmalloc.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAllocatorTypeBytes() {
      java.lang.Object ref = allocatorType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        allocatorType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (perProcessGpuMemoryFraction_ != 0D) {
        output.writeDouble(1, perProcessGpuMemoryFraction_);
      }
      if (!getAllocatorTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, allocatorType_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (perProcessGpuMemoryFraction_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, perProcessGpuMemoryFraction_);
      }
      if (!getAllocatorTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, allocatorType_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static tensorflow.Config.GPUOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Config.GPUOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Config.GPUOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Config.GPUOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Config.GPUOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Config.GPUOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static tensorflow.Config.GPUOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static tensorflow.Config.GPUOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static tensorflow.Config.GPUOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Config.GPUOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tensorflow.Config.GPUOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tensorflow.GPUOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.GPUOptions)
        tensorflow.Config.GPUOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tensorflow.Config.internal_static_tensorflow_GPUOptions_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tensorflow.Config.internal_static_tensorflow_GPUOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tensorflow.Config.GPUOptions.class, tensorflow.Config.GPUOptions.Builder.class);
      }

      // Construct using tensorflow.Config.GPUOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        perProcessGpuMemoryFraction_ = 0D;

        allocatorType_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tensorflow.Config.internal_static_tensorflow_GPUOptions_descriptor;
      }

      public tensorflow.Config.GPUOptions getDefaultInstanceForType() {
        return tensorflow.Config.GPUOptions.getDefaultInstance();
      }

      public tensorflow.Config.GPUOptions build() {
        tensorflow.Config.GPUOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public tensorflow.Config.GPUOptions buildPartial() {
        tensorflow.Config.GPUOptions result = new tensorflow.Config.GPUOptions(this);
        result.perProcessGpuMemoryFraction_ = perProcessGpuMemoryFraction_;
        result.allocatorType_ = allocatorType_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tensorflow.Config.GPUOptions) {
          return mergeFrom((tensorflow.Config.GPUOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tensorflow.Config.GPUOptions other) {
        if (other == tensorflow.Config.GPUOptions.getDefaultInstance()) return this;
        if (other.getPerProcessGpuMemoryFraction() != 0D) {
          setPerProcessGpuMemoryFraction(other.getPerProcessGpuMemoryFraction());
        }
        if (!other.getAllocatorType().isEmpty()) {
          allocatorType_ = other.allocatorType_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tensorflow.Config.GPUOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tensorflow.Config.GPUOptions) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double perProcessGpuMemoryFraction_ ;
      /**
       * <code>optional double per_process_gpu_memory_fraction = 1;</code>
       *
       * <pre>
       * A value between 0 and 1 that indicates what fraction of the
       * available GPU memory to pre-allocate for each process.  1 means
       * to pre-allocate all of the GPU memory, 0.5 means the process
       * allocates ~50% of the available GPU memory.
       * </pre>
       */
      public double getPerProcessGpuMemoryFraction() {
        return perProcessGpuMemoryFraction_;
      }
      /**
       * <code>optional double per_process_gpu_memory_fraction = 1;</code>
       *
       * <pre>
       * A value between 0 and 1 that indicates what fraction of the
       * available GPU memory to pre-allocate for each process.  1 means
       * to pre-allocate all of the GPU memory, 0.5 means the process
       * allocates ~50% of the available GPU memory.
       * </pre>
       */
      public Builder setPerProcessGpuMemoryFraction(double value) {
        
        perProcessGpuMemoryFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double per_process_gpu_memory_fraction = 1;</code>
       *
       * <pre>
       * A value between 0 and 1 that indicates what fraction of the
       * available GPU memory to pre-allocate for each process.  1 means
       * to pre-allocate all of the GPU memory, 0.5 means the process
       * allocates ~50% of the available GPU memory.
       * </pre>
       */
      public Builder clearPerProcessGpuMemoryFraction() {
        
        perProcessGpuMemoryFraction_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object allocatorType_ = "";
      /**
       * <code>optional string allocator_type = 2;</code>
       *
       * <pre>
       * The type of GPU allocation strategy to use.
       * Allowed values:
       * "": The empty string (default) uses a system-chosen default
       *     which may change over time.
       * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
       *        version of dlmalloc.
       * </pre>
       */
      public java.lang.String getAllocatorType() {
        java.lang.Object ref = allocatorType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          allocatorType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string allocator_type = 2;</code>
       *
       * <pre>
       * The type of GPU allocation strategy to use.
       * Allowed values:
       * "": The empty string (default) uses a system-chosen default
       *     which may change over time.
       * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
       *        version of dlmalloc.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAllocatorTypeBytes() {
        java.lang.Object ref = allocatorType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          allocatorType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string allocator_type = 2;</code>
       *
       * <pre>
       * The type of GPU allocation strategy to use.
       * Allowed values:
       * "": The empty string (default) uses a system-chosen default
       *     which may change over time.
       * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
       *        version of dlmalloc.
       * </pre>
       */
      public Builder setAllocatorType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        allocatorType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string allocator_type = 2;</code>
       *
       * <pre>
       * The type of GPU allocation strategy to use.
       * Allowed values:
       * "": The empty string (default) uses a system-chosen default
       *     which may change over time.
       * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
       *        version of dlmalloc.
       * </pre>
       */
      public Builder clearAllocatorType() {
        
        allocatorType_ = getDefaultInstance().getAllocatorType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string allocator_type = 2;</code>
       *
       * <pre>
       * The type of GPU allocation strategy to use.
       * Allowed values:
       * "": The empty string (default) uses a system-chosen default
       *     which may change over time.
       * "BFC": A "Best-fit with coalescing" algorithm, simplified from a
       *        version of dlmalloc.
       * </pre>
       */
      public Builder setAllocatorTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        allocatorType_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.GPUOptions)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions)
    private static final tensorflow.Config.GPUOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tensorflow.Config.GPUOptions();
    }

    public static tensorflow.Config.GPUOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GPUOptions>
        PARSER = new com.google.protobuf.AbstractParser<GPUOptions>() {
      public GPUOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new GPUOptions(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<GPUOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GPUOptions> getParserForType() {
      return PARSER;
    }

    public tensorflow.Config.GPUOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConfigProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.ConfigProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;string, int32&gt; device_count = 1;</code>
     *
     * <pre>
     * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
     * number of devices of that type to use.  If a particular device
     * type is not found in the map, the system picks an appropriate
     * number.
     * </pre>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getDeviceCount();

    /**
     * <code>optional int32 intra_op_parallelism_threads = 2;</code>
     *
     * <pre>
     * The execution of an individual op (for some op types) can be
     * parallelized on a pool of intra_op_parallelism_threads.
     * 0 means the system picks an appropriate number.
     * </pre>
     */
    int getIntraOpParallelismThreads();

    /**
     * <code>optional int32 inter_op_parallelism_threads = 5;</code>
     *
     * <pre>
     * Nodes that perform blocking operations are enqueued on a pool of
     * inter_op_parallelism_threads available in each process.
     * 0 means the system picks an appropriate number.
     * Note that the first Session created in the process sets the
     * number of threads for all future sessions.
     * </pre>
     */
    int getInterOpParallelismThreads();

    /**
     * <code>optional int32 placement_period = 3;</code>
     *
     * <pre>
     * Assignment of Nodes to Devices is recomputed every placement_period
     * steps until the system warms up (at which point the recomputation
     * typically slows down automatically).
     * </pre>
     */
    int getPlacementPeriod();

    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getDeviceFiltersList();
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    int getDeviceFiltersCount();
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    java.lang.String getDeviceFilters(int index);
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    com.google.protobuf.ByteString
        getDeviceFiltersBytes(int index);

    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    boolean hasGpuOptions();
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    tensorflow.Config.GPUOptions getGpuOptions();
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    tensorflow.Config.GPUOptionsOrBuilder getGpuOptionsOrBuilder();

    /**
     * <code>optional bool allow_soft_placement = 7;</code>
     *
     * <pre>
     * Whether soft placement is allowed. If allow_soft_placement is true,
     * an op will be placed on CPU if
     *   1. there's no GPU implementation for the OP
     * or
     *   2. no GPU devices are known or registered
     * or
     *   3. need to co-locate with reftype input(s) which are from CPU.
     * </pre>
     */
    boolean getAllowSoftPlacement();

    /**
     * <code>optional bool log_device_placement = 8;</code>
     *
     * <pre>
     * Whether device placements should be logged.
     * </pre>
     */
    boolean getLogDevicePlacement();
  }
  /**
   * Protobuf type {@code tensorflow.ConfigProto}
   *
   * <pre>
   * Session configuration parameters.
   * The system picks an appropriate values for fields that are not set.
   * </pre>
   */
  public  static final class ConfigProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:tensorflow.ConfigProto)
      ConfigProtoOrBuilder {
    // Use ConfigProto.newBuilder() to construct.
    private ConfigProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ConfigProto() {
      intraOpParallelismThreads_ = 0;
      interOpParallelismThreads_ = 0;
      placementPeriod_ = 0;
      deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      allowSoftPlacement_ = false;
      logDevicePlacement_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ConfigProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                deviceCount_ = com.google.protobuf.MapField.newMapField(
                    DeviceCountDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              deviceCount = input.readMessage(
                  DeviceCountDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              deviceCount_.getMutableMap().put(deviceCount.getKey(), deviceCount.getValue());
              break;
            }
            case 16: {

              intraOpParallelismThreads_ = input.readInt32();
              break;
            }
            case 24: {

              placementPeriod_ = input.readInt32();
              break;
            }
            case 34: {
              String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                deviceFilters_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              deviceFilters_.add(s);
              break;
            }
            case 40: {

              interOpParallelismThreads_ = input.readInt32();
              break;
            }
            case 50: {
              tensorflow.Config.GPUOptions.Builder subBuilder = null;
              if (gpuOptions_ != null) {
                subBuilder = gpuOptions_.toBuilder();
              }
              gpuOptions_ = input.readMessage(tensorflow.Config.GPUOptions.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gpuOptions_);
                gpuOptions_ = subBuilder.buildPartial();
              }

              break;
            }
            case 56: {

              allowSoftPlacement_ = input.readBool();
              break;
            }
            case 64: {

              logDevicePlacement_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          deviceFilters_ = deviceFilters_.getUnmodifiableView();
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tensorflow.Config.internal_static_tensorflow_ConfigProto_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetDeviceCount();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tensorflow.Config.internal_static_tensorflow_ConfigProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tensorflow.Config.ConfigProto.class, tensorflow.Config.ConfigProto.Builder.class);
    }

    private int bitField0_;
    public static final int DEVICE_COUNT_FIELD_NUMBER = 1;
    private static final class DeviceCountDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  tensorflow.Config.internal_static_tensorflow_ConfigProto_DeviceCountEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> deviceCount_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetDeviceCount() {
      if (deviceCount_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DeviceCountDefaultEntryHolder.defaultEntry);
     }
      return deviceCount_;
    }
    /**
     * <code>map&lt;string, int32&gt; device_count = 1;</code>
     *
     * <pre>
     * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
     * number of devices of that type to use.  If a particular device
     * type is not found in the map, the system picks an appropriate
     * number.
     * </pre>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getDeviceCount() {
      return internalGetDeviceCount().getMap();
    }

    public static final int INTRA_OP_PARALLELISM_THREADS_FIELD_NUMBER = 2;
    private int intraOpParallelismThreads_;
    /**
     * <code>optional int32 intra_op_parallelism_threads = 2;</code>
     *
     * <pre>
     * The execution of an individual op (for some op types) can be
     * parallelized on a pool of intra_op_parallelism_threads.
     * 0 means the system picks an appropriate number.
     * </pre>
     */
    public int getIntraOpParallelismThreads() {
      return intraOpParallelismThreads_;
    }

    public static final int INTER_OP_PARALLELISM_THREADS_FIELD_NUMBER = 5;
    private int interOpParallelismThreads_;
    /**
     * <code>optional int32 inter_op_parallelism_threads = 5;</code>
     *
     * <pre>
     * Nodes that perform blocking operations are enqueued on a pool of
     * inter_op_parallelism_threads available in each process.
     * 0 means the system picks an appropriate number.
     * Note that the first Session created in the process sets the
     * number of threads for all future sessions.
     * </pre>
     */
    public int getInterOpParallelismThreads() {
      return interOpParallelismThreads_;
    }

    public static final int PLACEMENT_PERIOD_FIELD_NUMBER = 3;
    private int placementPeriod_;
    /**
     * <code>optional int32 placement_period = 3;</code>
     *
     * <pre>
     * Assignment of Nodes to Devices is recomputed every placement_period
     * steps until the system warms up (at which point the recomputation
     * typically slows down automatically).
     * </pre>
     */
    public int getPlacementPeriod() {
      return placementPeriod_;
    }

    public static final int DEVICE_FILTERS_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList deviceFilters_;
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getDeviceFiltersList() {
      return deviceFilters_;
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public int getDeviceFiltersCount() {
      return deviceFilters_.size();
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public java.lang.String getDeviceFilters(int index) {
      return deviceFilters_.get(index);
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDeviceFiltersBytes(int index) {
      return deviceFilters_.getByteString(index);
    }

    public static final int GPU_OPTIONS_FIELD_NUMBER = 6;
    private tensorflow.Config.GPUOptions gpuOptions_;
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public boolean hasGpuOptions() {
      return gpuOptions_ != null;
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public tensorflow.Config.GPUOptions getGpuOptions() {
      return gpuOptions_ == null ? tensorflow.Config.GPUOptions.getDefaultInstance() : gpuOptions_;
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public tensorflow.Config.GPUOptionsOrBuilder getGpuOptionsOrBuilder() {
      return getGpuOptions();
    }

    public static final int ALLOW_SOFT_PLACEMENT_FIELD_NUMBER = 7;
    private boolean allowSoftPlacement_;
    /**
     * <code>optional bool allow_soft_placement = 7;</code>
     *
     * <pre>
     * Whether soft placement is allowed. If allow_soft_placement is true,
     * an op will be placed on CPU if
     *   1. there's no GPU implementation for the OP
     * or
     *   2. no GPU devices are known or registered
     * or
     *   3. need to co-locate with reftype input(s) which are from CPU.
     * </pre>
     */
    public boolean getAllowSoftPlacement() {
      return allowSoftPlacement_;
    }

    public static final int LOG_DEVICE_PLACEMENT_FIELD_NUMBER = 8;
    private boolean logDevicePlacement_;
    /**
     * <code>optional bool log_device_placement = 8;</code>
     *
     * <pre>
     * Whether device placements should be logged.
     * </pre>
     */
    public boolean getLogDevicePlacement() {
      return logDevicePlacement_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetDeviceCount().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        deviceCount = DeviceCountDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        output.writeMessage(1, deviceCount);
      }
      if (intraOpParallelismThreads_ != 0) {
        output.writeInt32(2, intraOpParallelismThreads_);
      }
      if (placementPeriod_ != 0) {
        output.writeInt32(3, placementPeriod_);
      }
      for (int i = 0; i < deviceFilters_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, deviceFilters_.getRaw(i));
      }
      if (interOpParallelismThreads_ != 0) {
        output.writeInt32(5, interOpParallelismThreads_);
      }
      if (gpuOptions_ != null) {
        output.writeMessage(6, getGpuOptions());
      }
      if (allowSoftPlacement_ != false) {
        output.writeBool(7, allowSoftPlacement_);
      }
      if (logDevicePlacement_ != false) {
        output.writeBool(8, logDevicePlacement_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetDeviceCount().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        deviceCount = DeviceCountDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, deviceCount);
      }
      if (intraOpParallelismThreads_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, intraOpParallelismThreads_);
      }
      if (placementPeriod_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, placementPeriod_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < deviceFilters_.size(); i++) {
          dataSize += computeStringSizeNoTag(deviceFilters_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDeviceFiltersList().size();
      }
      if (interOpParallelismThreads_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, interOpParallelismThreads_);
      }
      if (gpuOptions_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getGpuOptions());
      }
      if (allowSoftPlacement_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, allowSoftPlacement_);
      }
      if (logDevicePlacement_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, logDevicePlacement_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static tensorflow.Config.ConfigProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Config.ConfigProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Config.ConfigProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Config.ConfigProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Config.ConfigProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Config.ConfigProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static tensorflow.Config.ConfigProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static tensorflow.Config.ConfigProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static tensorflow.Config.ConfigProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Config.ConfigProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tensorflow.Config.ConfigProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tensorflow.ConfigProto}
     *
     * <pre>
     * Session configuration parameters.
     * The system picks an appropriate values for fields that are not set.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.ConfigProto)
        tensorflow.Config.ConfigProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tensorflow.Config.internal_static_tensorflow_ConfigProto_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetDeviceCount();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableDeviceCount();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tensorflow.Config.internal_static_tensorflow_ConfigProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tensorflow.Config.ConfigProto.class, tensorflow.Config.ConfigProto.Builder.class);
      }

      // Construct using tensorflow.Config.ConfigProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        internalGetMutableDeviceCount().clear();
        intraOpParallelismThreads_ = 0;

        interOpParallelismThreads_ = 0;

        placementPeriod_ = 0;

        deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (gpuOptionsBuilder_ == null) {
          gpuOptions_ = null;
        } else {
          gpuOptions_ = null;
          gpuOptionsBuilder_ = null;
        }
        allowSoftPlacement_ = false;

        logDevicePlacement_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tensorflow.Config.internal_static_tensorflow_ConfigProto_descriptor;
      }

      public tensorflow.Config.ConfigProto getDefaultInstanceForType() {
        return tensorflow.Config.ConfigProto.getDefaultInstance();
      }

      public tensorflow.Config.ConfigProto build() {
        tensorflow.Config.ConfigProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public tensorflow.Config.ConfigProto buildPartial() {
        tensorflow.Config.ConfigProto result = new tensorflow.Config.ConfigProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.deviceCount_ = internalGetDeviceCount();
        result.deviceCount_.makeImmutable();
        result.intraOpParallelismThreads_ = intraOpParallelismThreads_;
        result.interOpParallelismThreads_ = interOpParallelismThreads_;
        result.placementPeriod_ = placementPeriod_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          deviceFilters_ = deviceFilters_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.deviceFilters_ = deviceFilters_;
        if (gpuOptionsBuilder_ == null) {
          result.gpuOptions_ = gpuOptions_;
        } else {
          result.gpuOptions_ = gpuOptionsBuilder_.build();
        }
        result.allowSoftPlacement_ = allowSoftPlacement_;
        result.logDevicePlacement_ = logDevicePlacement_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tensorflow.Config.ConfigProto) {
          return mergeFrom((tensorflow.Config.ConfigProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tensorflow.Config.ConfigProto other) {
        if (other == tensorflow.Config.ConfigProto.getDefaultInstance()) return this;
        internalGetMutableDeviceCount().mergeFrom(
            other.internalGetDeviceCount());
        if (other.getIntraOpParallelismThreads() != 0) {
          setIntraOpParallelismThreads(other.getIntraOpParallelismThreads());
        }
        if (other.getInterOpParallelismThreads() != 0) {
          setInterOpParallelismThreads(other.getInterOpParallelismThreads());
        }
        if (other.getPlacementPeriod() != 0) {
          setPlacementPeriod(other.getPlacementPeriod());
        }
        if (!other.deviceFilters_.isEmpty()) {
          if (deviceFilters_.isEmpty()) {
            deviceFilters_ = other.deviceFilters_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDeviceFiltersIsMutable();
            deviceFilters_.addAll(other.deviceFilters_);
          }
          onChanged();
        }
        if (other.hasGpuOptions()) {
          mergeGpuOptions(other.getGpuOptions());
        }
        if (other.getAllowSoftPlacement() != false) {
          setAllowSoftPlacement(other.getAllowSoftPlacement());
        }
        if (other.getLogDevicePlacement() != false) {
          setLogDevicePlacement(other.getLogDevicePlacement());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tensorflow.Config.ConfigProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tensorflow.Config.ConfigProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> deviceCount_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetDeviceCount() {
        if (deviceCount_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              DeviceCountDefaultEntryHolder.defaultEntry);
       }
        return deviceCount_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableDeviceCount() {
        onChanged();;
        if (deviceCount_ == null) {
          deviceCount_ = com.google.protobuf.MapField.newMapField(
              DeviceCountDefaultEntryHolder.defaultEntry);
        }
        if (!deviceCount_.isMutable()) {
          deviceCount_ = deviceCount_.copy();
        }
        return deviceCount_;
      }
      /**
       * <code>map&lt;string, int32&gt; device_count = 1;</code>
       *
       * <pre>
       * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
       * number of devices of that type to use.  If a particular device
       * type is not found in the map, the system picks an appropriate
       * number.
       * </pre>
       */
      public java.util.Map<java.lang.String, java.lang.Integer> getDeviceCount() {
        return internalGetDeviceCount().getMap();
      }
      /**
       * <code>map&lt;string, int32&gt; device_count = 1;</code>
       *
       * <pre>
       * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
       * number of devices of that type to use.  If a particular device
       * type is not found in the map, the system picks an appropriate
       * number.
       * </pre>
       */
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableDeviceCount() {
        return internalGetMutableDeviceCount().getMutableMap();
      }
      /**
       * <code>map&lt;string, int32&gt; device_count = 1;</code>
       *
       * <pre>
       * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
       * number of devices of that type to use.  If a particular device
       * type is not found in the map, the system picks an appropriate
       * number.
       * </pre>
       */
      public Builder putAllDeviceCount(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        getMutableDeviceCount().putAll(values);
        return this;
      }

      private int intraOpParallelismThreads_ ;
      /**
       * <code>optional int32 intra_op_parallelism_threads = 2;</code>
       *
       * <pre>
       * The execution of an individual op (for some op types) can be
       * parallelized on a pool of intra_op_parallelism_threads.
       * 0 means the system picks an appropriate number.
       * </pre>
       */
      public int getIntraOpParallelismThreads() {
        return intraOpParallelismThreads_;
      }
      /**
       * <code>optional int32 intra_op_parallelism_threads = 2;</code>
       *
       * <pre>
       * The execution of an individual op (for some op types) can be
       * parallelized on a pool of intra_op_parallelism_threads.
       * 0 means the system picks an appropriate number.
       * </pre>
       */
      public Builder setIntraOpParallelismThreads(int value) {
        
        intraOpParallelismThreads_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 intra_op_parallelism_threads = 2;</code>
       *
       * <pre>
       * The execution of an individual op (for some op types) can be
       * parallelized on a pool of intra_op_parallelism_threads.
       * 0 means the system picks an appropriate number.
       * </pre>
       */
      public Builder clearIntraOpParallelismThreads() {
        
        intraOpParallelismThreads_ = 0;
        onChanged();
        return this;
      }

      private int interOpParallelismThreads_ ;
      /**
       * <code>optional int32 inter_op_parallelism_threads = 5;</code>
       *
       * <pre>
       * Nodes that perform blocking operations are enqueued on a pool of
       * inter_op_parallelism_threads available in each process.
       * 0 means the system picks an appropriate number.
       * Note that the first Session created in the process sets the
       * number of threads for all future sessions.
       * </pre>
       */
      public int getInterOpParallelismThreads() {
        return interOpParallelismThreads_;
      }
      /**
       * <code>optional int32 inter_op_parallelism_threads = 5;</code>
       *
       * <pre>
       * Nodes that perform blocking operations are enqueued on a pool of
       * inter_op_parallelism_threads available in each process.
       * 0 means the system picks an appropriate number.
       * Note that the first Session created in the process sets the
       * number of threads for all future sessions.
       * </pre>
       */
      public Builder setInterOpParallelismThreads(int value) {
        
        interOpParallelismThreads_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 inter_op_parallelism_threads = 5;</code>
       *
       * <pre>
       * Nodes that perform blocking operations are enqueued on a pool of
       * inter_op_parallelism_threads available in each process.
       * 0 means the system picks an appropriate number.
       * Note that the first Session created in the process sets the
       * number of threads for all future sessions.
       * </pre>
       */
      public Builder clearInterOpParallelismThreads() {
        
        interOpParallelismThreads_ = 0;
        onChanged();
        return this;
      }

      private int placementPeriod_ ;
      /**
       * <code>optional int32 placement_period = 3;</code>
       *
       * <pre>
       * Assignment of Nodes to Devices is recomputed every placement_period
       * steps until the system warms up (at which point the recomputation
       * typically slows down automatically).
       * </pre>
       */
      public int getPlacementPeriod() {
        return placementPeriod_;
      }
      /**
       * <code>optional int32 placement_period = 3;</code>
       *
       * <pre>
       * Assignment of Nodes to Devices is recomputed every placement_period
       * steps until the system warms up (at which point the recomputation
       * typically slows down automatically).
       * </pre>
       */
      public Builder setPlacementPeriod(int value) {
        
        placementPeriod_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 placement_period = 3;</code>
       *
       * <pre>
       * Assignment of Nodes to Devices is recomputed every placement_period
       * steps until the system warms up (at which point the recomputation
       * typically slows down automatically).
       * </pre>
       */
      public Builder clearPlacementPeriod() {
        
        placementPeriod_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDeviceFiltersIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          deviceFilters_ = new com.google.protobuf.LazyStringArrayList(deviceFilters_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getDeviceFiltersList() {
        return deviceFilters_.getUnmodifiableView();
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public int getDeviceFiltersCount() {
        return deviceFilters_.size();
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public java.lang.String getDeviceFilters(int index) {
        return deviceFilters_.get(index);
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeviceFiltersBytes(int index) {
        return deviceFilters_.getByteString(index);
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public Builder setDeviceFilters(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDeviceFiltersIsMutable();
        deviceFilters_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public Builder addDeviceFilters(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDeviceFiltersIsMutable();
        deviceFilters_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public Builder addAllDeviceFilters(
          java.lang.Iterable<java.lang.String> values) {
        ensureDeviceFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, deviceFilters_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public Builder clearDeviceFilters() {
        deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string device_filters = 4;</code>
       *
       * <pre>
       * When any filters are present sessions will ignore all devices which do not
       * match the filters. Each filter can be partially specified, e.g. "/job:ps"
       * "/job:worker/replica:3", etc.
       * </pre>
       */
      public Builder addDeviceFiltersBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureDeviceFiltersIsMutable();
        deviceFilters_.add(value);
        onChanged();
        return this;
      }

      private tensorflow.Config.GPUOptions gpuOptions_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          tensorflow.Config.GPUOptions, tensorflow.Config.GPUOptions.Builder, tensorflow.Config.GPUOptionsOrBuilder> gpuOptionsBuilder_;
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public boolean hasGpuOptions() {
        return gpuOptionsBuilder_ != null || gpuOptions_ != null;
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public tensorflow.Config.GPUOptions getGpuOptions() {
        if (gpuOptionsBuilder_ == null) {
          return gpuOptions_ == null ? tensorflow.Config.GPUOptions.getDefaultInstance() : gpuOptions_;
        } else {
          return gpuOptionsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public Builder setGpuOptions(tensorflow.Config.GPUOptions value) {
        if (gpuOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gpuOptions_ = value;
          onChanged();
        } else {
          gpuOptionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public Builder setGpuOptions(
          tensorflow.Config.GPUOptions.Builder builderForValue) {
        if (gpuOptionsBuilder_ == null) {
          gpuOptions_ = builderForValue.build();
          onChanged();
        } else {
          gpuOptionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public Builder mergeGpuOptions(tensorflow.Config.GPUOptions value) {
        if (gpuOptionsBuilder_ == null) {
          if (gpuOptions_ != null) {
            gpuOptions_ =
              tensorflow.Config.GPUOptions.newBuilder(gpuOptions_).mergeFrom(value).buildPartial();
          } else {
            gpuOptions_ = value;
          }
          onChanged();
        } else {
          gpuOptionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public Builder clearGpuOptions() {
        if (gpuOptionsBuilder_ == null) {
          gpuOptions_ = null;
          onChanged();
        } else {
          gpuOptions_ = null;
          gpuOptionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public tensorflow.Config.GPUOptions.Builder getGpuOptionsBuilder() {
        
        onChanged();
        return getGpuOptionsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      public tensorflow.Config.GPUOptionsOrBuilder getGpuOptionsOrBuilder() {
        if (gpuOptionsBuilder_ != null) {
          return gpuOptionsBuilder_.getMessageOrBuilder();
        } else {
          return gpuOptions_ == null ?
              tensorflow.Config.GPUOptions.getDefaultInstance() : gpuOptions_;
        }
      }
      /**
       * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
       *
       * <pre>
       * Options that apply to all GPUs.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          tensorflow.Config.GPUOptions, tensorflow.Config.GPUOptions.Builder, tensorflow.Config.GPUOptionsOrBuilder> 
          getGpuOptionsFieldBuilder() {
        if (gpuOptionsBuilder_ == null) {
          gpuOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              tensorflow.Config.GPUOptions, tensorflow.Config.GPUOptions.Builder, tensorflow.Config.GPUOptionsOrBuilder>(
                  getGpuOptions(),
                  getParentForChildren(),
                  isClean());
          gpuOptions_ = null;
        }
        return gpuOptionsBuilder_;
      }

      private boolean allowSoftPlacement_ ;
      /**
       * <code>optional bool allow_soft_placement = 7;</code>
       *
       * <pre>
       * Whether soft placement is allowed. If allow_soft_placement is true,
       * an op will be placed on CPU if
       *   1. there's no GPU implementation for the OP
       * or
       *   2. no GPU devices are known or registered
       * or
       *   3. need to co-locate with reftype input(s) which are from CPU.
       * </pre>
       */
      public boolean getAllowSoftPlacement() {
        return allowSoftPlacement_;
      }
      /**
       * <code>optional bool allow_soft_placement = 7;</code>
       *
       * <pre>
       * Whether soft placement is allowed. If allow_soft_placement is true,
       * an op will be placed on CPU if
       *   1. there's no GPU implementation for the OP
       * or
       *   2. no GPU devices are known or registered
       * or
       *   3. need to co-locate with reftype input(s) which are from CPU.
       * </pre>
       */
      public Builder setAllowSoftPlacement(boolean value) {
        
        allowSoftPlacement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool allow_soft_placement = 7;</code>
       *
       * <pre>
       * Whether soft placement is allowed. If allow_soft_placement is true,
       * an op will be placed on CPU if
       *   1. there's no GPU implementation for the OP
       * or
       *   2. no GPU devices are known or registered
       * or
       *   3. need to co-locate with reftype input(s) which are from CPU.
       * </pre>
       */
      public Builder clearAllowSoftPlacement() {
        
        allowSoftPlacement_ = false;
        onChanged();
        return this;
      }

      private boolean logDevicePlacement_ ;
      /**
       * <code>optional bool log_device_placement = 8;</code>
       *
       * <pre>
       * Whether device placements should be logged.
       * </pre>
       */
      public boolean getLogDevicePlacement() {
        return logDevicePlacement_;
      }
      /**
       * <code>optional bool log_device_placement = 8;</code>
       *
       * <pre>
       * Whether device placements should be logged.
       * </pre>
       */
      public Builder setLogDevicePlacement(boolean value) {
        
        logDevicePlacement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool log_device_placement = 8;</code>
       *
       * <pre>
       * Whether device placements should be logged.
       * </pre>
       */
      public Builder clearLogDevicePlacement() {
        
        logDevicePlacement_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.ConfigProto)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.ConfigProto)
    private static final tensorflow.Config.ConfigProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tensorflow.Config.ConfigProto();
    }

    public static tensorflow.Config.ConfigProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConfigProto>
        PARSER = new com.google.protobuf.AbstractParser<ConfigProto>() {
      public ConfigProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new ConfigProto(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<ConfigProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConfigProto> getParserForType() {
      return PARSER;
    }

    public tensorflow.Config.ConfigProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_GPUOptions_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tensorflow_GPUOptions_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_ConfigProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tensorflow_ConfigProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_ConfigProto_DeviceCountEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tensorflow_ConfigProto_DeviceCountEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n&tensorflow/core/framework/config.proto" +
      "\022\ntensorflow\"M\n\nGPUOptions\022\'\n\037per_proces" +
      "s_gpu_memory_fraction\030\001 \001(\001\022\026\n\016allocator" +
      "_type\030\002 \001(\t\"\350\002\n\013ConfigProto\022>\n\014device_co" +
      "unt\030\001 \003(\0132(.tensorflow.ConfigProto.Devic" +
      "eCountEntry\022$\n\034intra_op_parallelism_thre" +
      "ads\030\002 \001(\005\022$\n\034inter_op_parallelism_thread" +
      "s\030\005 \001(\005\022\030\n\020placement_period\030\003 \001(\005\022\026\n\016dev" +
      "ice_filters\030\004 \003(\t\022+\n\013gpu_options\030\006 \001(\0132\026" +
      ".tensorflow.GPUOptions\022\034\n\024allow_soft_pla",
      "cement\030\007 \001(\010\022\034\n\024log_device_placement\030\010 \001" +
      "(\010\0322\n\020DeviceCountEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v" +
      "alue\030\002 \001(\005:\0028\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_tensorflow_GPUOptions_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tensorflow_GPUOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_tensorflow_GPUOptions_descriptor,
        new java.lang.String[] { "PerProcessGpuMemoryFraction", "AllocatorType", });
    internal_static_tensorflow_ConfigProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_tensorflow_ConfigProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_tensorflow_ConfigProto_descriptor,
        new java.lang.String[] { "DeviceCount", "IntraOpParallelismThreads", "InterOpParallelismThreads", "PlacementPeriod", "DeviceFilters", "GpuOptions", "AllowSoftPlacement", "LogDevicePlacement", });
    internal_static_tensorflow_ConfigProto_DeviceCountEntry_descriptor =
      internal_static_tensorflow_ConfigProto_descriptor.getNestedTypes().get(0);
    internal_static_tensorflow_ConfigProto_DeviceCountEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_tensorflow_ConfigProto_DeviceCountEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
