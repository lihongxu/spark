// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/graph.proto

package tensorflow;

public final class Graph {
  private Graph() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GraphDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.GraphDef)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    java.util.List<tensorflow.Graph.NodeDef> 
        getNodeList();
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    tensorflow.Graph.NodeDef getNode(int index);
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    int getNodeCount();
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    java.util.List<? extends tensorflow.Graph.NodeDefOrBuilder> 
        getNodeOrBuilderList();
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    tensorflow.Graph.NodeDefOrBuilder getNodeOrBuilder(
        int index);

    /**
     * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
     *
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", {...}}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     */
    boolean hasLibrary();
    /**
     * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
     *
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", {...}}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     */
    tensorflow.Function.FunctionDefLibrary getLibrary();
    /**
     * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
     *
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", {...}}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     */
    tensorflow.Function.FunctionDefLibraryOrBuilder getLibraryOrBuilder();
  }
  /**
   * Protobuf type {@code tensorflow.GraphDef}
   *
   * <pre>
   * Represents the graph of operations
   * TODO(sanjay): Also want to put the following somewhere:
   * * random_seed
   * * replicas: Do we stamp them out in python itself?
   * * where to load parameters
   * * optimizer info? does it go with the parameter layers/ops?
   * </pre>
   */
  public  static final class GraphDef extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:tensorflow.GraphDef)
      GraphDefOrBuilder {
    // Use GraphDef.newBuilder() to construct.
    private GraphDef(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GraphDef() {
      node_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private GraphDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                node_ = new java.util.ArrayList<tensorflow.Graph.NodeDef>();
                mutable_bitField0_ |= 0x00000001;
              }
              node_.add(input.readMessage(tensorflow.Graph.NodeDef.parser(), extensionRegistry));
              break;
            }
            case 18: {
              tensorflow.Function.FunctionDefLibrary.Builder subBuilder = null;
              if (library_ != null) {
                subBuilder = library_.toBuilder();
              }
              library_ = input.readMessage(tensorflow.Function.FunctionDefLibrary.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(library_);
                library_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          node_ = java.util.Collections.unmodifiableList(node_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tensorflow.Graph.internal_static_tensorflow_GraphDef_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tensorflow.Graph.internal_static_tensorflow_GraphDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tensorflow.Graph.GraphDef.class, tensorflow.Graph.GraphDef.Builder.class);
    }

    private int bitField0_;
    public static final int NODE_FIELD_NUMBER = 1;
    private java.util.List<tensorflow.Graph.NodeDef> node_;
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    public java.util.List<tensorflow.Graph.NodeDef> getNodeList() {
      return node_;
    }
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    public java.util.List<? extends tensorflow.Graph.NodeDefOrBuilder> 
        getNodeOrBuilderList() {
      return node_;
    }
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    public int getNodeCount() {
      return node_.size();
    }
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    public tensorflow.Graph.NodeDef getNode(int index) {
      return node_.get(index);
    }
    /**
     * <code>repeated .tensorflow.NodeDef node = 1;</code>
     */
    public tensorflow.Graph.NodeDefOrBuilder getNodeOrBuilder(
        int index) {
      return node_.get(index);
    }

    public static final int LIBRARY_FIELD_NUMBER = 2;
    private tensorflow.Function.FunctionDefLibrary library_;
    /**
     * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
     *
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", {...}}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     */
    public boolean hasLibrary() {
      return library_ != null;
    }
    /**
     * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
     *
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", {...}}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     */
    public tensorflow.Function.FunctionDefLibrary getLibrary() {
      return library_ == null ? tensorflow.Function.FunctionDefLibrary.getDefaultInstance() : library_;
    }
    /**
     * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
     *
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", {...}}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     */
    public tensorflow.Function.FunctionDefLibraryOrBuilder getLibraryOrBuilder() {
      return getLibrary();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < node_.size(); i++) {
        output.writeMessage(1, node_.get(i));
      }
      if (library_ != null) {
        output.writeMessage(2, getLibrary());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < node_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, node_.get(i));
      }
      if (library_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLibrary());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static tensorflow.Graph.GraphDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Graph.GraphDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Graph.GraphDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Graph.GraphDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Graph.GraphDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Graph.GraphDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static tensorflow.Graph.GraphDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static tensorflow.Graph.GraphDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static tensorflow.Graph.GraphDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Graph.GraphDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tensorflow.Graph.GraphDef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tensorflow.GraphDef}
     *
     * <pre>
     * Represents the graph of operations
     * TODO(sanjay): Also want to put the following somewhere:
     * * random_seed
     * * replicas: Do we stamp them out in python itself?
     * * where to load parameters
     * * optimizer info? does it go with the parameter layers/ops?
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.GraphDef)
        tensorflow.Graph.GraphDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tensorflow.Graph.internal_static_tensorflow_GraphDef_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tensorflow.Graph.internal_static_tensorflow_GraphDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tensorflow.Graph.GraphDef.class, tensorflow.Graph.GraphDef.Builder.class);
      }

      // Construct using tensorflow.Graph.GraphDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getNodeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          nodeBuilder_.clear();
        }
        if (libraryBuilder_ == null) {
          library_ = null;
        } else {
          library_ = null;
          libraryBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tensorflow.Graph.internal_static_tensorflow_GraphDef_descriptor;
      }

      public tensorflow.Graph.GraphDef getDefaultInstanceForType() {
        return tensorflow.Graph.GraphDef.getDefaultInstance();
      }

      public tensorflow.Graph.GraphDef build() {
        tensorflow.Graph.GraphDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public tensorflow.Graph.GraphDef buildPartial() {
        tensorflow.Graph.GraphDef result = new tensorflow.Graph.GraphDef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (nodeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            node_ = java.util.Collections.unmodifiableList(node_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.node_ = node_;
        } else {
          result.node_ = nodeBuilder_.build();
        }
        if (libraryBuilder_ == null) {
          result.library_ = library_;
        } else {
          result.library_ = libraryBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tensorflow.Graph.GraphDef) {
          return mergeFrom((tensorflow.Graph.GraphDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tensorflow.Graph.GraphDef other) {
        if (other == tensorflow.Graph.GraphDef.getDefaultInstance()) return this;
        if (nodeBuilder_ == null) {
          if (!other.node_.isEmpty()) {
            if (node_.isEmpty()) {
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureNodeIsMutable();
              node_.addAll(other.node_);
            }
            onChanged();
          }
        } else {
          if (!other.node_.isEmpty()) {
            if (nodeBuilder_.isEmpty()) {
              nodeBuilder_.dispose();
              nodeBuilder_ = null;
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000001);
              nodeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getNodeFieldBuilder() : null;
            } else {
              nodeBuilder_.addAllMessages(other.node_);
            }
          }
        }
        if (other.hasLibrary()) {
          mergeLibrary(other.getLibrary());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tensorflow.Graph.GraphDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tensorflow.Graph.GraphDef) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<tensorflow.Graph.NodeDef> node_ =
        java.util.Collections.emptyList();
      private void ensureNodeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          node_ = new java.util.ArrayList<tensorflow.Graph.NodeDef>(node_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          tensorflow.Graph.NodeDef, tensorflow.Graph.NodeDef.Builder, tensorflow.Graph.NodeDefOrBuilder> nodeBuilder_;

      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public java.util.List<tensorflow.Graph.NodeDef> getNodeList() {
        if (nodeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(node_);
        } else {
          return nodeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public int getNodeCount() {
        if (nodeBuilder_ == null) {
          return node_.size();
        } else {
          return nodeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public tensorflow.Graph.NodeDef getNode(int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);
        } else {
          return nodeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder setNode(
          int index, tensorflow.Graph.NodeDef value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.set(index, value);
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder setNode(
          int index, tensorflow.Graph.NodeDef.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder addNode(tensorflow.Graph.NodeDef value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder addNode(
          int index, tensorflow.Graph.NodeDef value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(index, value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder addNode(
          tensorflow.Graph.NodeDef.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder addNode(
          int index, tensorflow.Graph.NodeDef.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder addAllNode(
          java.lang.Iterable<? extends tensorflow.Graph.NodeDef> values) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, node_);
          onChanged();
        } else {
          nodeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder clearNode() {
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          nodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public Builder removeNode(int index) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.remove(index);
          onChanged();
        } else {
          nodeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public tensorflow.Graph.NodeDef.Builder getNodeBuilder(
          int index) {
        return getNodeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public tensorflow.Graph.NodeDefOrBuilder getNodeOrBuilder(
          int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);  } else {
          return nodeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public java.util.List<? extends tensorflow.Graph.NodeDefOrBuilder> 
           getNodeOrBuilderList() {
        if (nodeBuilder_ != null) {
          return nodeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(node_);
        }
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public tensorflow.Graph.NodeDef.Builder addNodeBuilder() {
        return getNodeFieldBuilder().addBuilder(
            tensorflow.Graph.NodeDef.getDefaultInstance());
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public tensorflow.Graph.NodeDef.Builder addNodeBuilder(
          int index) {
        return getNodeFieldBuilder().addBuilder(
            index, tensorflow.Graph.NodeDef.getDefaultInstance());
      }
      /**
       * <code>repeated .tensorflow.NodeDef node = 1;</code>
       */
      public java.util.List<tensorflow.Graph.NodeDef.Builder> 
           getNodeBuilderList() {
        return getNodeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          tensorflow.Graph.NodeDef, tensorflow.Graph.NodeDef.Builder, tensorflow.Graph.NodeDefOrBuilder> 
          getNodeFieldBuilder() {
        if (nodeBuilder_ == null) {
          nodeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              tensorflow.Graph.NodeDef, tensorflow.Graph.NodeDef.Builder, tensorflow.Graph.NodeDefOrBuilder>(
                  node_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          node_ = null;
        }
        return nodeBuilder_;
      }

      private tensorflow.Function.FunctionDefLibrary library_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          tensorflow.Function.FunctionDefLibrary, tensorflow.Function.FunctionDefLibrary.Builder, tensorflow.Function.FunctionDefLibraryOrBuilder> libraryBuilder_;
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public boolean hasLibrary() {
        return libraryBuilder_ != null || library_ != null;
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public tensorflow.Function.FunctionDefLibrary getLibrary() {
        if (libraryBuilder_ == null) {
          return library_ == null ? tensorflow.Function.FunctionDefLibrary.getDefaultInstance() : library_;
        } else {
          return libraryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public Builder setLibrary(tensorflow.Function.FunctionDefLibrary value) {
        if (libraryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          library_ = value;
          onChanged();
        } else {
          libraryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public Builder setLibrary(
          tensorflow.Function.FunctionDefLibrary.Builder builderForValue) {
        if (libraryBuilder_ == null) {
          library_ = builderForValue.build();
          onChanged();
        } else {
          libraryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public Builder mergeLibrary(tensorflow.Function.FunctionDefLibrary value) {
        if (libraryBuilder_ == null) {
          if (library_ != null) {
            library_ =
              tensorflow.Function.FunctionDefLibrary.newBuilder(library_).mergeFrom(value).buildPartial();
          } else {
            library_ = value;
          }
          onChanged();
        } else {
          libraryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public Builder clearLibrary() {
        if (libraryBuilder_ == null) {
          library_ = null;
          onChanged();
        } else {
          library_ = null;
          libraryBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public tensorflow.Function.FunctionDefLibrary.Builder getLibraryBuilder() {
        
        onChanged();
        return getLibraryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      public tensorflow.Function.FunctionDefLibraryOrBuilder getLibraryOrBuilder() {
        if (libraryBuilder_ != null) {
          return libraryBuilder_.getMessageOrBuilder();
        } else {
          return library_ == null ?
              tensorflow.Function.FunctionDefLibrary.getDefaultInstance() : library_;
        }
      }
      /**
       * <code>optional .tensorflow.FunctionDefLibrary library = 2;</code>
       *
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", {...}}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          tensorflow.Function.FunctionDefLibrary, tensorflow.Function.FunctionDefLibrary.Builder, tensorflow.Function.FunctionDefLibraryOrBuilder> 
          getLibraryFieldBuilder() {
        if (libraryBuilder_ == null) {
          libraryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              tensorflow.Function.FunctionDefLibrary, tensorflow.Function.FunctionDefLibrary.Builder, tensorflow.Function.FunctionDefLibraryOrBuilder>(
                  getLibrary(),
                  getParentForChildren(),
                  isClean());
          library_ = null;
        }
        return libraryBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.GraphDef)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.GraphDef)
    private static final tensorflow.Graph.GraphDef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tensorflow.Graph.GraphDef();
    }

    public static tensorflow.Graph.GraphDef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GraphDef>
        PARSER = new com.google.protobuf.AbstractParser<GraphDef>() {
      public GraphDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new GraphDef(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<GraphDef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GraphDef> getParserForType() {
      return PARSER;
    }

    public tensorflow.Graph.GraphDef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NodeDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.NodeDef)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string op = 2;</code>
     *
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     */
    java.lang.String getOp();
    /**
     * <code>optional string op = 2;</code>
     *
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     */
    com.google.protobuf.ByteString
        getOpBytes();

    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getInputList();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    int getInputCount();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    java.lang.String getInput(int index);
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    com.google.protobuf.ByteString
        getInputBytes(int index);

    /**
     * <code>optional string device = 4;</code>
     *
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
     * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "&#64;other/node"                         (colocate with "other/node")
     * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
     * * "/job:worker/gpu:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     */
    java.lang.String getDevice();
    /**
     * <code>optional string device = 4;</code>
     *
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
     * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "&#64;other/node"                         (colocate with "other/node")
     * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
     * * "/job:worker/gpu:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     */
    com.google.protobuf.ByteString
        getDeviceBytes();

    /**
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     *
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     */
    java.util.Map<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
    getAttr();
  }
  /**
   * Protobuf type {@code tensorflow.NodeDef}
   */
  public  static final class NodeDef extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:tensorflow.NodeDef)
      NodeDefOrBuilder {
    // Use NodeDef.newBuilder() to construct.
    private NodeDef(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NodeDef() {
      name_ = "";
      op_ = "";
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      device_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private NodeDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              op_ = s;
              break;
            }
            case 26: {
              String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                input_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              input_.add(s);
              break;
            }
            case 34: {
              String s = input.readStringRequireUtf8();

              device_ = s;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                attr_ = com.google.protobuf.MapField.newMapField(
                    AttrDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
              attr = input.readMessage(
                  AttrDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              attr_.getMutableMap().put(attr.getKey(), attr.getValue());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = input_.getUnmodifiableView();
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tensorflow.Graph.internal_static_tensorflow_NodeDef_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetAttr();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tensorflow.Graph.internal_static_tensorflow_NodeDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tensorflow.Graph.NodeDef.class, tensorflow.Graph.NodeDef.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OP_FIELD_NUMBER = 2;
    private volatile java.lang.Object op_;
    /**
     * <code>optional string op = 2;</code>
     *
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     */
    public java.lang.String getOp() {
      java.lang.Object ref = op_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        op_ = s;
        return s;
      }
    }
    /**
     * <code>optional string op = 2;</code>
     *
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getOpBytes() {
      java.lang.Object ref = op_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        op_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INPUT_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList input_;
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getInputList() {
      return input_;
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }

    public static final int DEVICE_FIELD_NUMBER = 4;
    private volatile java.lang.Object device_;
    /**
     * <code>optional string device = 4;</code>
     *
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
     * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "&#64;other/node"                         (colocate with "other/node")
     * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
     * * "/job:worker/gpu:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     */
    public java.lang.String getDevice() {
      java.lang.Object ref = device_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        device_ = s;
        return s;
      }
    }
    /**
     * <code>optional string device = 4;</code>
     *
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
     * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "&#64;other/node"                         (colocate with "other/node")
     * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
     * * "/job:worker/gpu:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDeviceBytes() {
      java.lang.Object ref = device_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        device_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ATTR_FIELD_NUMBER = 5;
    private static final class AttrDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>newDefaultInstance(
                  tensorflow.Graph.internal_static_tensorflow_NodeDef_AttrEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  tensorflow.AttrValueOuterClass.AttrValue.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> attr_;
    private com.google.protobuf.MapField<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
    internalGetAttr() {
      if (attr_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttrDefaultEntryHolder.defaultEntry);
     }
      return attr_;
    }
    /**
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     *
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     */

    public java.util.Map<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> getAttr() {
      return internalGetAttr().getMap();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
      }
      if (!getOpBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, op_);
      }
      for (int i = 0; i < input_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, input_.getRaw(i));
      }
      if (!getDeviceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, device_);
      }
      for (java.util.Map.Entry<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> entry
           : internalGetAttr().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
        attr = AttrDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        output.writeMessage(5, attr);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
      }
      if (!getOpBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, op_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < input_.size(); i++) {
          dataSize += computeStringSizeNoTag(input_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getInputList().size();
      }
      if (!getDeviceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, device_);
      }
      for (java.util.Map.Entry<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> entry
           : internalGetAttr().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
        attr = AttrDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, attr);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static tensorflow.Graph.NodeDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Graph.NodeDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Graph.NodeDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tensorflow.Graph.NodeDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tensorflow.Graph.NodeDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Graph.NodeDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static tensorflow.Graph.NodeDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static tensorflow.Graph.NodeDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static tensorflow.Graph.NodeDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tensorflow.Graph.NodeDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tensorflow.Graph.NodeDef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tensorflow.NodeDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.NodeDef)
        tensorflow.Graph.NodeDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tensorflow.Graph.internal_static_tensorflow_NodeDef_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetAttr();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMutableAttr();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tensorflow.Graph.internal_static_tensorflow_NodeDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tensorflow.Graph.NodeDef.class, tensorflow.Graph.NodeDef.Builder.class);
      }

      // Construct using tensorflow.Graph.NodeDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        op_ = "";

        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        device_ = "";

        internalGetMutableAttr().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tensorflow.Graph.internal_static_tensorflow_NodeDef_descriptor;
      }

      public tensorflow.Graph.NodeDef getDefaultInstanceForType() {
        return tensorflow.Graph.NodeDef.getDefaultInstance();
      }

      public tensorflow.Graph.NodeDef build() {
        tensorflow.Graph.NodeDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public tensorflow.Graph.NodeDef buildPartial() {
        tensorflow.Graph.NodeDef result = new tensorflow.Graph.NodeDef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.name_ = name_;
        result.op_ = op_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = input_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.input_ = input_;
        result.device_ = device_;
        result.attr_ = internalGetAttr();
        result.attr_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tensorflow.Graph.NodeDef) {
          return mergeFrom((tensorflow.Graph.NodeDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tensorflow.Graph.NodeDef other) {
        if (other == tensorflow.Graph.NodeDef.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getOp().isEmpty()) {
          op_ = other.op_;
          onChanged();
        }
        if (!other.input_.isEmpty()) {
          if (input_.isEmpty()) {
            input_ = other.input_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInputIsMutable();
            input_.addAll(other.input_);
          }
          onChanged();
        }
        if (!other.getDevice().isEmpty()) {
          device_ = other.device_;
          onChanged();
        }
        internalGetMutableAttr().mergeFrom(
            other.internalGetAttr());
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tensorflow.Graph.NodeDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tensorflow.Graph.NodeDef) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name given to this operator. Used for naming inputs,
       * logging, visualization, etc.  Unique within a single GraphDef.
       * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name given to this operator. Used for naming inputs,
       * logging, visualization, etc.  Unique within a single GraphDef.
       * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name given to this operator. Used for naming inputs,
       * logging, visualization, etc.  Unique within a single GraphDef.
       * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name given to this operator. Used for naming inputs,
       * logging, visualization, etc.  Unique within a single GraphDef.
       * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
       * </pre>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name given to this operator. Used for naming inputs,
       * logging, visualization, etc.  Unique within a single GraphDef.
       * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object op_ = "";
      /**
       * <code>optional string op = 2;</code>
       *
       * <pre>
       * The operation name.  There may be custom parameters in attrs.
       * Op names starting with an underscore are reserved for internal use.
       * </pre>
       */
      public java.lang.String getOp() {
        java.lang.Object ref = op_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          op_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string op = 2;</code>
       *
       * <pre>
       * The operation name.  There may be custom parameters in attrs.
       * Op names starting with an underscore are reserved for internal use.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getOpBytes() {
        java.lang.Object ref = op_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          op_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string op = 2;</code>
       *
       * <pre>
       * The operation name.  There may be custom parameters in attrs.
       * Op names starting with an underscore are reserved for internal use.
       * </pre>
       */
      public Builder setOp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        op_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string op = 2;</code>
       *
       * <pre>
       * The operation name.  There may be custom parameters in attrs.
       * Op names starting with an underscore are reserved for internal use.
       * </pre>
       */
      public Builder clearOp() {
        
        op_ = getDefaultInstance().getOp();
        onChanged();
        return this;
      }
      /**
       * <code>optional string op = 2;</code>
       *
       * <pre>
       * The operation name.  There may be custom parameters in attrs.
       * Op names starting with an underscore are reserved for internal use.
       * </pre>
       */
      public Builder setOpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        op_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = new com.google.protobuf.LazyStringArrayList(input_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getInputList() {
        return input_.getUnmodifiableView();
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public int getInputCount() {
        return input_.size();
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public java.lang.String getInput(int index) {
        return input_.get(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInputBytes(int index) {
        return input_.getByteString(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public Builder setInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public Builder addInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public Builder addAllInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, input_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public Builder clearInput() {
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * Each input is "node:src_output" with "node" being a string name and
       * "src_output" indicating which output tensor to use from "node". If
       * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
       * may optionally be followed by control inputs that have the format
       * "^node".
       * </pre>
       */
      public Builder addInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object device_ = "";
      /**
       * <code>optional string device = 4;</code>
       *
       * <pre>
       * A (possibly partial) specification for the device on which this
       * node should be placed.
       * The expected syntax for this string is as follows:
       * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
       * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
       * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
       * CONSTRAINT ::= ("job:" JOB_NAME)
       *              | ("replica:" [1-9][0-9]*)
       *              | ("task:" [1-9][0-9]*)
       *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
       * Valid values for this string include:
       * * "&#64;other/node"                         (colocate with "other/node")
       * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
       * * "/job:worker/gpu:3"                   (partial specification)
       * * ""                                    (no specification)
       * If the constraints do not resolve to a single device (or if this
       * field is empty or not present), the runtime will attempt to
       * choose a device automatically.
       * </pre>
       */
      public java.lang.String getDevice() {
        java.lang.Object ref = device_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          device_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string device = 4;</code>
       *
       * <pre>
       * A (possibly partial) specification for the device on which this
       * node should be placed.
       * The expected syntax for this string is as follows:
       * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
       * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
       * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
       * CONSTRAINT ::= ("job:" JOB_NAME)
       *              | ("replica:" [1-9][0-9]*)
       *              | ("task:" [1-9][0-9]*)
       *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
       * Valid values for this string include:
       * * "&#64;other/node"                         (colocate with "other/node")
       * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
       * * "/job:worker/gpu:3"                   (partial specification)
       * * ""                                    (no specification)
       * If the constraints do not resolve to a single device (or if this
       * field is empty or not present), the runtime will attempt to
       * choose a device automatically.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeviceBytes() {
        java.lang.Object ref = device_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          device_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string device = 4;</code>
       *
       * <pre>
       * A (possibly partial) specification for the device on which this
       * node should be placed.
       * The expected syntax for this string is as follows:
       * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
       * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
       * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
       * CONSTRAINT ::= ("job:" JOB_NAME)
       *              | ("replica:" [1-9][0-9]*)
       *              | ("task:" [1-9][0-9]*)
       *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
       * Valid values for this string include:
       * * "&#64;other/node"                         (colocate with "other/node")
       * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
       * * "/job:worker/gpu:3"                   (partial specification)
       * * ""                                    (no specification)
       * If the constraints do not resolve to a single device (or if this
       * field is empty or not present), the runtime will attempt to
       * choose a device automatically.
       * </pre>
       */
      public Builder setDevice(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        device_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string device = 4;</code>
       *
       * <pre>
       * A (possibly partial) specification for the device on which this
       * node should be placed.
       * The expected syntax for this string is as follows:
       * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
       * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
       * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
       * CONSTRAINT ::= ("job:" JOB_NAME)
       *              | ("replica:" [1-9][0-9]*)
       *              | ("task:" [1-9][0-9]*)
       *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
       * Valid values for this string include:
       * * "&#64;other/node"                         (colocate with "other/node")
       * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
       * * "/job:worker/gpu:3"                   (partial specification)
       * * ""                                    (no specification)
       * If the constraints do not resolve to a single device (or if this
       * field is empty or not present), the runtime will attempt to
       * choose a device automatically.
       * </pre>
       */
      public Builder clearDevice() {
        
        device_ = getDefaultInstance().getDevice();
        onChanged();
        return this;
      }
      /**
       * <code>optional string device = 4;</code>
       *
       * <pre>
       * A (possibly partial) specification for the device on which this
       * node should be placed.
       * The expected syntax for this string is as follows:
       * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
       * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
       * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
       * CONSTRAINT ::= ("job:" JOB_NAME)
       *              | ("replica:" [1-9][0-9]*)
       *              | ("task:" [1-9][0-9]*)
       *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
       * Valid values for this string include:
       * * "&#64;other/node"                         (colocate with "other/node")
       * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
       * * "/job:worker/gpu:3"                   (partial specification)
       * * ""                                    (no specification)
       * If the constraints do not resolve to a single device (or if this
       * field is empty or not present), the runtime will attempt to
       * choose a device automatically.
       * </pre>
       */
      public Builder setDeviceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        device_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> attr_;
      private com.google.protobuf.MapField<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
      internalGetAttr() {
        if (attr_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AttrDefaultEntryHolder.defaultEntry);
       }
        return attr_;
      }
      private com.google.protobuf.MapField<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
      internalGetMutableAttr() {
        onChanged();;
        if (attr_ == null) {
          attr_ = com.google.protobuf.MapField.newMapField(
              AttrDefaultEntryHolder.defaultEntry);
        }
        if (!attr_.isMutable()) {
          attr_ = attr_.copy();
        }
        return attr_;
      }
      /**
       * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
       *
       * <pre>
       * Operation-specific graph-construction-time configuration.
       * Note that this should include all attrs defined in the
       * corresponding OpDef, including those with a value matching
       * the default -- this allows the default to change and makes
       * NodeDefs easier to interpret on their own.  However, if
       * an attr with a default is not specified in this list, the
       * default will be used.
       * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
       * one of the names from the corresponding OpDef's attr field).
       * The values must have a type matching the corresponding OpDef
       * attr's type field.
       * TODO(josh11b): Add some examples here showing best practices.
       * </pre>
       */
      public java.util.Map<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> getAttr() {
        return internalGetAttr().getMap();
      }
      /**
       * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
       *
       * <pre>
       * Operation-specific graph-construction-time configuration.
       * Note that this should include all attrs defined in the
       * corresponding OpDef, including those with a value matching
       * the default -- this allows the default to change and makes
       * NodeDefs easier to interpret on their own.  However, if
       * an attr with a default is not specified in this list, the
       * default will be used.
       * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
       * one of the names from the corresponding OpDef's attr field).
       * The values must have a type matching the corresponding OpDef
       * attr's type field.
       * TODO(josh11b): Add some examples here showing best practices.
       * </pre>
       */
      public java.util.Map<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue>
      getMutableAttr() {
        return internalGetMutableAttr().getMutableMap();
      }
      /**
       * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
       *
       * <pre>
       * Operation-specific graph-construction-time configuration.
       * Note that this should include all attrs defined in the
       * corresponding OpDef, including those with a value matching
       * the default -- this allows the default to change and makes
       * NodeDefs easier to interpret on their own.  However, if
       * an attr with a default is not specified in this list, the
       * default will be used.
       * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
       * one of the names from the corresponding OpDef's attr field).
       * The values must have a type matching the corresponding OpDef
       * attr's type field.
       * TODO(josh11b): Add some examples here showing best practices.
       * </pre>
       */
      public Builder putAllAttr(
          java.util.Map<java.lang.String, tensorflow.AttrValueOuterClass.AttrValue> values) {
        getMutableAttr().putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.NodeDef)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.NodeDef)
    private static final tensorflow.Graph.NodeDef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tensorflow.Graph.NodeDef();
    }

    public static tensorflow.Graph.NodeDef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NodeDef>
        PARSER = new com.google.protobuf.AbstractParser<NodeDef>() {
      public NodeDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new NodeDef(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<NodeDef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NodeDef> getParserForType() {
      return PARSER;
    }

    public tensorflow.Graph.NodeDef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_GraphDef_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tensorflow_GraphDef_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_NodeDef_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tensorflow_NodeDef_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_NodeDef_AttrEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tensorflow_NodeDef_AttrEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n%tensorflow/core/framework/graph.proto\022" +
      "\ntensorflow\032*tensorflow/core/framework/a" +
      "ttr_value.proto\032(tensorflow/core/framewo" +
      "rk/function.proto\"^\n\010GraphDef\022!\n\004node\030\001 " +
      "\003(\0132\023.tensorflow.NodeDef\022/\n\007library\030\002 \001(" +
      "\0132\036.tensorflow.FunctionDefLibrary\"\263\001\n\007No" +
      "deDef\022\014\n\004name\030\001 \001(\t\022\n\n\002op\030\002 \001(\t\022\r\n\005input" +
      "\030\003 \003(\t\022\016\n\006device\030\004 \001(\t\022+\n\004attr\030\005 \003(\0132\035.t" +
      "ensorflow.NodeDef.AttrEntry\032B\n\tAttrEntry" +
      "\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.tensorflo",
      "w.AttrValue:\0028\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          tensorflow.AttrValueOuterClass.getDescriptor(),
          tensorflow.Function.getDescriptor(),
        }, assigner);
    internal_static_tensorflow_GraphDef_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tensorflow_GraphDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_tensorflow_GraphDef_descriptor,
        new java.lang.String[] { "Node", "Library", });
    internal_static_tensorflow_NodeDef_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_tensorflow_NodeDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_tensorflow_NodeDef_descriptor,
        new java.lang.String[] { "Name", "Op", "Input", "Device", "Attr", });
    internal_static_tensorflow_NodeDef_AttrEntry_descriptor =
      internal_static_tensorflow_NodeDef_descriptor.getNestedTypes().get(0);
    internal_static_tensorflow_NodeDef_AttrEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_tensorflow_NodeDef_AttrEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    tensorflow.AttrValueOuterClass.getDescriptor();
    tensorflow.Function.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
